// Prisma Schema for Dev-Mode Email Analytics (SQLite)
// DB file path: provider-proxy/devemail.db

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./../devemail.db"
}

model RawEmail {
  id         String   @id @default(cuid())
  source     String // e.g., "imap:zoho", "webhook:brevo"
  subject    String?
  receivedAt DateTime @default(now())
  // IMAP Idempotenz
  messageId  String?  @unique
  imapUid    Int?
  mailbox    String   @default("INBOX")

  // Original payloads
  rawHeaders     String? // optional serialized headers
  rawBody        String? // optional raw email body
  headers        String? // JSON-stringified normalized headers
  attachments    String? // JSON-stringified array: [{ filename, mime, size }]
  hasAttachments Boolean @default(false)
  size           Int? // approximate size in bytes

  // Addresses
  from String? // e.g., "Name <a@b.com>"
  to   String? // comma-separated list
  cc   String? // comma-separated list

  // Processing status
  parsed Boolean @default(false)
  error  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dmarcReports DMARCReport[]

  @@index([imapUid])
  @@index([receivedAt])
}

model DMARCReport {
  id         String    @id @default(cuid())
  rawEmailId String?
  rawEmail   RawEmail? @relation(fields: [rawEmailId], references: [id])

  org       String?
  reportId  String?
  domain    String?
  dateBegin Int? // epoch seconds
  dateEnd   Int?

  policyAdkim String? // 'r' | 's'
  policyAspf  String? // 'r' | 's'
  policyP     String? // 'none' | 'quarantine' | 'reject'

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  records DMARCRecord[]

  @@index([domain])
  @@index([reportId])
}

model DMARCRecord {
  id       String      @id @default(cuid())
  reportId String
  report   DMARCReport @relation(fields: [reportId], references: [id])

  sourceIp    String?
  count       Int?    @default(0)
  disposition String? // none|quarantine|reject
  dkim        String? // pass|fail
  spf         String? // pass|fail

  headerFrom String?
  authDkim   String?
  authSpf    String?

  createdAt DateTime @default(now())

  @@index([sourceIp])
}

model SentEmail {
  id          String    @id @default(cuid())
  messageId   String?   @unique
  from        String
  to          String
  cc          String?
  subject     String?
  bodyText    String?
  bodyHtml    String?
  attachments String? // JSON-stringified array: [{ filename, mime, size }]
  status      String    @default("queued") // queued|sent|failed
  providerId  String?
  error       String?
  createdAt   DateTime  @default(now())
  sentAt      DateTime?

  @@index([status])
  @@index([createdAt])
}
