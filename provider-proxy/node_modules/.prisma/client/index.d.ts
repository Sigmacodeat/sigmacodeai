
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model RawEmail
 * 
 */
export type RawEmail = $Result.DefaultSelection<Prisma.$RawEmailPayload>
/**
 * Model DMARCReport
 * 
 */
export type DMARCReport = $Result.DefaultSelection<Prisma.$DMARCReportPayload>
/**
 * Model DMARCRecord
 * 
 */
export type DMARCRecord = $Result.DefaultSelection<Prisma.$DMARCRecordPayload>
/**
 * Model SentEmail
 * 
 */
export type SentEmail = $Result.DefaultSelection<Prisma.$SentEmailPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more RawEmails
 * const rawEmails = await prisma.rawEmail.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more RawEmails
   * const rawEmails = await prisma.rawEmail.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.rawEmail`: Exposes CRUD operations for the **RawEmail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RawEmails
    * const rawEmails = await prisma.rawEmail.findMany()
    * ```
    */
  get rawEmail(): Prisma.RawEmailDelegate<ExtArgs>;

  /**
   * `prisma.dMARCReport`: Exposes CRUD operations for the **DMARCReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DMARCReports
    * const dMARCReports = await prisma.dMARCReport.findMany()
    * ```
    */
  get dMARCReport(): Prisma.DMARCReportDelegate<ExtArgs>;

  /**
   * `prisma.dMARCRecord`: Exposes CRUD operations for the **DMARCRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DMARCRecords
    * const dMARCRecords = await prisma.dMARCRecord.findMany()
    * ```
    */
  get dMARCRecord(): Prisma.DMARCRecordDelegate<ExtArgs>;

  /**
   * `prisma.sentEmail`: Exposes CRUD operations for the **SentEmail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SentEmails
    * const sentEmails = await prisma.sentEmail.findMany()
    * ```
    */
  get sentEmail(): Prisma.SentEmailDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    RawEmail: 'RawEmail',
    DMARCReport: 'DMARCReport',
    DMARCRecord: 'DMARCRecord',
    SentEmail: 'SentEmail'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "rawEmail" | "dMARCReport" | "dMARCRecord" | "sentEmail"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      RawEmail: {
        payload: Prisma.$RawEmailPayload<ExtArgs>
        fields: Prisma.RawEmailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RawEmailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEmailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RawEmailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEmailPayload>
          }
          findFirst: {
            args: Prisma.RawEmailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEmailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RawEmailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEmailPayload>
          }
          findMany: {
            args: Prisma.RawEmailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEmailPayload>[]
          }
          create: {
            args: Prisma.RawEmailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEmailPayload>
          }
          createMany: {
            args: Prisma.RawEmailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RawEmailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEmailPayload>[]
          }
          delete: {
            args: Prisma.RawEmailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEmailPayload>
          }
          update: {
            args: Prisma.RawEmailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEmailPayload>
          }
          deleteMany: {
            args: Prisma.RawEmailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RawEmailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RawEmailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEmailPayload>
          }
          aggregate: {
            args: Prisma.RawEmailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRawEmail>
          }
          groupBy: {
            args: Prisma.RawEmailGroupByArgs<ExtArgs>
            result: $Utils.Optional<RawEmailGroupByOutputType>[]
          }
          count: {
            args: Prisma.RawEmailCountArgs<ExtArgs>
            result: $Utils.Optional<RawEmailCountAggregateOutputType> | number
          }
        }
      }
      DMARCReport: {
        payload: Prisma.$DMARCReportPayload<ExtArgs>
        fields: Prisma.DMARCReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DMARCReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DMARCReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCReportPayload>
          }
          findFirst: {
            args: Prisma.DMARCReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DMARCReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCReportPayload>
          }
          findMany: {
            args: Prisma.DMARCReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCReportPayload>[]
          }
          create: {
            args: Prisma.DMARCReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCReportPayload>
          }
          createMany: {
            args: Prisma.DMARCReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DMARCReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCReportPayload>[]
          }
          delete: {
            args: Prisma.DMARCReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCReportPayload>
          }
          update: {
            args: Prisma.DMARCReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCReportPayload>
          }
          deleteMany: {
            args: Prisma.DMARCReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DMARCReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DMARCReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCReportPayload>
          }
          aggregate: {
            args: Prisma.DMARCReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDMARCReport>
          }
          groupBy: {
            args: Prisma.DMARCReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<DMARCReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.DMARCReportCountArgs<ExtArgs>
            result: $Utils.Optional<DMARCReportCountAggregateOutputType> | number
          }
        }
      }
      DMARCRecord: {
        payload: Prisma.$DMARCRecordPayload<ExtArgs>
        fields: Prisma.DMARCRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DMARCRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DMARCRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCRecordPayload>
          }
          findFirst: {
            args: Prisma.DMARCRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DMARCRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCRecordPayload>
          }
          findMany: {
            args: Prisma.DMARCRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCRecordPayload>[]
          }
          create: {
            args: Prisma.DMARCRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCRecordPayload>
          }
          createMany: {
            args: Prisma.DMARCRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DMARCRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCRecordPayload>[]
          }
          delete: {
            args: Prisma.DMARCRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCRecordPayload>
          }
          update: {
            args: Prisma.DMARCRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCRecordPayload>
          }
          deleteMany: {
            args: Prisma.DMARCRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DMARCRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DMARCRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DMARCRecordPayload>
          }
          aggregate: {
            args: Prisma.DMARCRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDMARCRecord>
          }
          groupBy: {
            args: Prisma.DMARCRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<DMARCRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.DMARCRecordCountArgs<ExtArgs>
            result: $Utils.Optional<DMARCRecordCountAggregateOutputType> | number
          }
        }
      }
      SentEmail: {
        payload: Prisma.$SentEmailPayload<ExtArgs>
        fields: Prisma.SentEmailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SentEmailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SentEmailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SentEmailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SentEmailPayload>
          }
          findFirst: {
            args: Prisma.SentEmailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SentEmailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SentEmailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SentEmailPayload>
          }
          findMany: {
            args: Prisma.SentEmailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SentEmailPayload>[]
          }
          create: {
            args: Prisma.SentEmailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SentEmailPayload>
          }
          createMany: {
            args: Prisma.SentEmailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SentEmailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SentEmailPayload>[]
          }
          delete: {
            args: Prisma.SentEmailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SentEmailPayload>
          }
          update: {
            args: Prisma.SentEmailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SentEmailPayload>
          }
          deleteMany: {
            args: Prisma.SentEmailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SentEmailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SentEmailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SentEmailPayload>
          }
          aggregate: {
            args: Prisma.SentEmailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSentEmail>
          }
          groupBy: {
            args: Prisma.SentEmailGroupByArgs<ExtArgs>
            result: $Utils.Optional<SentEmailGroupByOutputType>[]
          }
          count: {
            args: Prisma.SentEmailCountArgs<ExtArgs>
            result: $Utils.Optional<SentEmailCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RawEmailCountOutputType
   */

  export type RawEmailCountOutputType = {
    dmarcReports: number
  }

  export type RawEmailCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dmarcReports?: boolean | RawEmailCountOutputTypeCountDmarcReportsArgs
  }

  // Custom InputTypes
  /**
   * RawEmailCountOutputType without action
   */
  export type RawEmailCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEmailCountOutputType
     */
    select?: RawEmailCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RawEmailCountOutputType without action
   */
  export type RawEmailCountOutputTypeCountDmarcReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DMARCReportWhereInput
  }


  /**
   * Count Type DMARCReportCountOutputType
   */

  export type DMARCReportCountOutputType = {
    records: number
  }

  export type DMARCReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    records?: boolean | DMARCReportCountOutputTypeCountRecordsArgs
  }

  // Custom InputTypes
  /**
   * DMARCReportCountOutputType without action
   */
  export type DMARCReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCReportCountOutputType
     */
    select?: DMARCReportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DMARCReportCountOutputType without action
   */
  export type DMARCReportCountOutputTypeCountRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DMARCRecordWhereInput
  }


  /**
   * Models
   */

  /**
   * Model RawEmail
   */

  export type AggregateRawEmail = {
    _count: RawEmailCountAggregateOutputType | null
    _avg: RawEmailAvgAggregateOutputType | null
    _sum: RawEmailSumAggregateOutputType | null
    _min: RawEmailMinAggregateOutputType | null
    _max: RawEmailMaxAggregateOutputType | null
  }

  export type RawEmailAvgAggregateOutputType = {
    imapUid: number | null
    size: number | null
  }

  export type RawEmailSumAggregateOutputType = {
    imapUid: number | null
    size: number | null
  }

  export type RawEmailMinAggregateOutputType = {
    id: string | null
    source: string | null
    subject: string | null
    receivedAt: Date | null
    messageId: string | null
    imapUid: number | null
    mailbox: string | null
    rawHeaders: string | null
    rawBody: string | null
    headers: string | null
    attachments: string | null
    hasAttachments: boolean | null
    size: number | null
    from: string | null
    to: string | null
    cc: string | null
    parsed: boolean | null
    error: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RawEmailMaxAggregateOutputType = {
    id: string | null
    source: string | null
    subject: string | null
    receivedAt: Date | null
    messageId: string | null
    imapUid: number | null
    mailbox: string | null
    rawHeaders: string | null
    rawBody: string | null
    headers: string | null
    attachments: string | null
    hasAttachments: boolean | null
    size: number | null
    from: string | null
    to: string | null
    cc: string | null
    parsed: boolean | null
    error: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RawEmailCountAggregateOutputType = {
    id: number
    source: number
    subject: number
    receivedAt: number
    messageId: number
    imapUid: number
    mailbox: number
    rawHeaders: number
    rawBody: number
    headers: number
    attachments: number
    hasAttachments: number
    size: number
    from: number
    to: number
    cc: number
    parsed: number
    error: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RawEmailAvgAggregateInputType = {
    imapUid?: true
    size?: true
  }

  export type RawEmailSumAggregateInputType = {
    imapUid?: true
    size?: true
  }

  export type RawEmailMinAggregateInputType = {
    id?: true
    source?: true
    subject?: true
    receivedAt?: true
    messageId?: true
    imapUid?: true
    mailbox?: true
    rawHeaders?: true
    rawBody?: true
    headers?: true
    attachments?: true
    hasAttachments?: true
    size?: true
    from?: true
    to?: true
    cc?: true
    parsed?: true
    error?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RawEmailMaxAggregateInputType = {
    id?: true
    source?: true
    subject?: true
    receivedAt?: true
    messageId?: true
    imapUid?: true
    mailbox?: true
    rawHeaders?: true
    rawBody?: true
    headers?: true
    attachments?: true
    hasAttachments?: true
    size?: true
    from?: true
    to?: true
    cc?: true
    parsed?: true
    error?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RawEmailCountAggregateInputType = {
    id?: true
    source?: true
    subject?: true
    receivedAt?: true
    messageId?: true
    imapUid?: true
    mailbox?: true
    rawHeaders?: true
    rawBody?: true
    headers?: true
    attachments?: true
    hasAttachments?: true
    size?: true
    from?: true
    to?: true
    cc?: true
    parsed?: true
    error?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RawEmailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RawEmail to aggregate.
     */
    where?: RawEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RawEmails to fetch.
     */
    orderBy?: RawEmailOrderByWithRelationInput | RawEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RawEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RawEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RawEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RawEmails
    **/
    _count?: true | RawEmailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RawEmailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RawEmailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RawEmailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RawEmailMaxAggregateInputType
  }

  export type GetRawEmailAggregateType<T extends RawEmailAggregateArgs> = {
        [P in keyof T & keyof AggregateRawEmail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRawEmail[P]>
      : GetScalarType<T[P], AggregateRawEmail[P]>
  }




  export type RawEmailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RawEmailWhereInput
    orderBy?: RawEmailOrderByWithAggregationInput | RawEmailOrderByWithAggregationInput[]
    by: RawEmailScalarFieldEnum[] | RawEmailScalarFieldEnum
    having?: RawEmailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RawEmailCountAggregateInputType | true
    _avg?: RawEmailAvgAggregateInputType
    _sum?: RawEmailSumAggregateInputType
    _min?: RawEmailMinAggregateInputType
    _max?: RawEmailMaxAggregateInputType
  }

  export type RawEmailGroupByOutputType = {
    id: string
    source: string
    subject: string | null
    receivedAt: Date
    messageId: string | null
    imapUid: number | null
    mailbox: string
    rawHeaders: string | null
    rawBody: string | null
    headers: string | null
    attachments: string | null
    hasAttachments: boolean
    size: number | null
    from: string | null
    to: string | null
    cc: string | null
    parsed: boolean
    error: string | null
    createdAt: Date
    updatedAt: Date
    _count: RawEmailCountAggregateOutputType | null
    _avg: RawEmailAvgAggregateOutputType | null
    _sum: RawEmailSumAggregateOutputType | null
    _min: RawEmailMinAggregateOutputType | null
    _max: RawEmailMaxAggregateOutputType | null
  }

  type GetRawEmailGroupByPayload<T extends RawEmailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RawEmailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RawEmailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RawEmailGroupByOutputType[P]>
            : GetScalarType<T[P], RawEmailGroupByOutputType[P]>
        }
      >
    >


  export type RawEmailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    subject?: boolean
    receivedAt?: boolean
    messageId?: boolean
    imapUid?: boolean
    mailbox?: boolean
    rawHeaders?: boolean
    rawBody?: boolean
    headers?: boolean
    attachments?: boolean
    hasAttachments?: boolean
    size?: boolean
    from?: boolean
    to?: boolean
    cc?: boolean
    parsed?: boolean
    error?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dmarcReports?: boolean | RawEmail$dmarcReportsArgs<ExtArgs>
    _count?: boolean | RawEmailCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rawEmail"]>

  export type RawEmailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    subject?: boolean
    receivedAt?: boolean
    messageId?: boolean
    imapUid?: boolean
    mailbox?: boolean
    rawHeaders?: boolean
    rawBody?: boolean
    headers?: boolean
    attachments?: boolean
    hasAttachments?: boolean
    size?: boolean
    from?: boolean
    to?: boolean
    cc?: boolean
    parsed?: boolean
    error?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["rawEmail"]>

  export type RawEmailSelectScalar = {
    id?: boolean
    source?: boolean
    subject?: boolean
    receivedAt?: boolean
    messageId?: boolean
    imapUid?: boolean
    mailbox?: boolean
    rawHeaders?: boolean
    rawBody?: boolean
    headers?: boolean
    attachments?: boolean
    hasAttachments?: boolean
    size?: boolean
    from?: boolean
    to?: boolean
    cc?: boolean
    parsed?: boolean
    error?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RawEmailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dmarcReports?: boolean | RawEmail$dmarcReportsArgs<ExtArgs>
    _count?: boolean | RawEmailCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RawEmailIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RawEmailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RawEmail"
    objects: {
      dmarcReports: Prisma.$DMARCReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      source: string
      subject: string | null
      receivedAt: Date
      messageId: string | null
      imapUid: number | null
      mailbox: string
      rawHeaders: string | null
      rawBody: string | null
      headers: string | null
      attachments: string | null
      hasAttachments: boolean
      size: number | null
      from: string | null
      to: string | null
      cc: string | null
      parsed: boolean
      error: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rawEmail"]>
    composites: {}
  }

  type RawEmailGetPayload<S extends boolean | null | undefined | RawEmailDefaultArgs> = $Result.GetResult<Prisma.$RawEmailPayload, S>

  type RawEmailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RawEmailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RawEmailCountAggregateInputType | true
    }

  export interface RawEmailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RawEmail'], meta: { name: 'RawEmail' } }
    /**
     * Find zero or one RawEmail that matches the filter.
     * @param {RawEmailFindUniqueArgs} args - Arguments to find a RawEmail
     * @example
     * // Get one RawEmail
     * const rawEmail = await prisma.rawEmail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RawEmailFindUniqueArgs>(args: SelectSubset<T, RawEmailFindUniqueArgs<ExtArgs>>): Prisma__RawEmailClient<$Result.GetResult<Prisma.$RawEmailPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RawEmail that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RawEmailFindUniqueOrThrowArgs} args - Arguments to find a RawEmail
     * @example
     * // Get one RawEmail
     * const rawEmail = await prisma.rawEmail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RawEmailFindUniqueOrThrowArgs>(args: SelectSubset<T, RawEmailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RawEmailClient<$Result.GetResult<Prisma.$RawEmailPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RawEmail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEmailFindFirstArgs} args - Arguments to find a RawEmail
     * @example
     * // Get one RawEmail
     * const rawEmail = await prisma.rawEmail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RawEmailFindFirstArgs>(args?: SelectSubset<T, RawEmailFindFirstArgs<ExtArgs>>): Prisma__RawEmailClient<$Result.GetResult<Prisma.$RawEmailPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RawEmail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEmailFindFirstOrThrowArgs} args - Arguments to find a RawEmail
     * @example
     * // Get one RawEmail
     * const rawEmail = await prisma.rawEmail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RawEmailFindFirstOrThrowArgs>(args?: SelectSubset<T, RawEmailFindFirstOrThrowArgs<ExtArgs>>): Prisma__RawEmailClient<$Result.GetResult<Prisma.$RawEmailPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RawEmails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEmailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RawEmails
     * const rawEmails = await prisma.rawEmail.findMany()
     * 
     * // Get first 10 RawEmails
     * const rawEmails = await prisma.rawEmail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rawEmailWithIdOnly = await prisma.rawEmail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RawEmailFindManyArgs>(args?: SelectSubset<T, RawEmailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RawEmailPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RawEmail.
     * @param {RawEmailCreateArgs} args - Arguments to create a RawEmail.
     * @example
     * // Create one RawEmail
     * const RawEmail = await prisma.rawEmail.create({
     *   data: {
     *     // ... data to create a RawEmail
     *   }
     * })
     * 
     */
    create<T extends RawEmailCreateArgs>(args: SelectSubset<T, RawEmailCreateArgs<ExtArgs>>): Prisma__RawEmailClient<$Result.GetResult<Prisma.$RawEmailPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RawEmails.
     * @param {RawEmailCreateManyArgs} args - Arguments to create many RawEmails.
     * @example
     * // Create many RawEmails
     * const rawEmail = await prisma.rawEmail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RawEmailCreateManyArgs>(args?: SelectSubset<T, RawEmailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RawEmails and returns the data saved in the database.
     * @param {RawEmailCreateManyAndReturnArgs} args - Arguments to create many RawEmails.
     * @example
     * // Create many RawEmails
     * const rawEmail = await prisma.rawEmail.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RawEmails and only return the `id`
     * const rawEmailWithIdOnly = await prisma.rawEmail.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RawEmailCreateManyAndReturnArgs>(args?: SelectSubset<T, RawEmailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RawEmailPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RawEmail.
     * @param {RawEmailDeleteArgs} args - Arguments to delete one RawEmail.
     * @example
     * // Delete one RawEmail
     * const RawEmail = await prisma.rawEmail.delete({
     *   where: {
     *     // ... filter to delete one RawEmail
     *   }
     * })
     * 
     */
    delete<T extends RawEmailDeleteArgs>(args: SelectSubset<T, RawEmailDeleteArgs<ExtArgs>>): Prisma__RawEmailClient<$Result.GetResult<Prisma.$RawEmailPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RawEmail.
     * @param {RawEmailUpdateArgs} args - Arguments to update one RawEmail.
     * @example
     * // Update one RawEmail
     * const rawEmail = await prisma.rawEmail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RawEmailUpdateArgs>(args: SelectSubset<T, RawEmailUpdateArgs<ExtArgs>>): Prisma__RawEmailClient<$Result.GetResult<Prisma.$RawEmailPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RawEmails.
     * @param {RawEmailDeleteManyArgs} args - Arguments to filter RawEmails to delete.
     * @example
     * // Delete a few RawEmails
     * const { count } = await prisma.rawEmail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RawEmailDeleteManyArgs>(args?: SelectSubset<T, RawEmailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RawEmails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEmailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RawEmails
     * const rawEmail = await prisma.rawEmail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RawEmailUpdateManyArgs>(args: SelectSubset<T, RawEmailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RawEmail.
     * @param {RawEmailUpsertArgs} args - Arguments to update or create a RawEmail.
     * @example
     * // Update or create a RawEmail
     * const rawEmail = await prisma.rawEmail.upsert({
     *   create: {
     *     // ... data to create a RawEmail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RawEmail we want to update
     *   }
     * })
     */
    upsert<T extends RawEmailUpsertArgs>(args: SelectSubset<T, RawEmailUpsertArgs<ExtArgs>>): Prisma__RawEmailClient<$Result.GetResult<Prisma.$RawEmailPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RawEmails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEmailCountArgs} args - Arguments to filter RawEmails to count.
     * @example
     * // Count the number of RawEmails
     * const count = await prisma.rawEmail.count({
     *   where: {
     *     // ... the filter for the RawEmails we want to count
     *   }
     * })
    **/
    count<T extends RawEmailCountArgs>(
      args?: Subset<T, RawEmailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RawEmailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RawEmail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RawEmailAggregateArgs>(args: Subset<T, RawEmailAggregateArgs>): Prisma.PrismaPromise<GetRawEmailAggregateType<T>>

    /**
     * Group by RawEmail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEmailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RawEmailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RawEmailGroupByArgs['orderBy'] }
        : { orderBy?: RawEmailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RawEmailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRawEmailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RawEmail model
   */
  readonly fields: RawEmailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RawEmail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RawEmailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dmarcReports<T extends RawEmail$dmarcReportsArgs<ExtArgs> = {}>(args?: Subset<T, RawEmail$dmarcReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DMARCReportPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RawEmail model
   */ 
  interface RawEmailFieldRefs {
    readonly id: FieldRef<"RawEmail", 'String'>
    readonly source: FieldRef<"RawEmail", 'String'>
    readonly subject: FieldRef<"RawEmail", 'String'>
    readonly receivedAt: FieldRef<"RawEmail", 'DateTime'>
    readonly messageId: FieldRef<"RawEmail", 'String'>
    readonly imapUid: FieldRef<"RawEmail", 'Int'>
    readonly mailbox: FieldRef<"RawEmail", 'String'>
    readonly rawHeaders: FieldRef<"RawEmail", 'String'>
    readonly rawBody: FieldRef<"RawEmail", 'String'>
    readonly headers: FieldRef<"RawEmail", 'String'>
    readonly attachments: FieldRef<"RawEmail", 'String'>
    readonly hasAttachments: FieldRef<"RawEmail", 'Boolean'>
    readonly size: FieldRef<"RawEmail", 'Int'>
    readonly from: FieldRef<"RawEmail", 'String'>
    readonly to: FieldRef<"RawEmail", 'String'>
    readonly cc: FieldRef<"RawEmail", 'String'>
    readonly parsed: FieldRef<"RawEmail", 'Boolean'>
    readonly error: FieldRef<"RawEmail", 'String'>
    readonly createdAt: FieldRef<"RawEmail", 'DateTime'>
    readonly updatedAt: FieldRef<"RawEmail", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RawEmail findUnique
   */
  export type RawEmailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEmail
     */
    select?: RawEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawEmailInclude<ExtArgs> | null
    /**
     * Filter, which RawEmail to fetch.
     */
    where: RawEmailWhereUniqueInput
  }

  /**
   * RawEmail findUniqueOrThrow
   */
  export type RawEmailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEmail
     */
    select?: RawEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawEmailInclude<ExtArgs> | null
    /**
     * Filter, which RawEmail to fetch.
     */
    where: RawEmailWhereUniqueInput
  }

  /**
   * RawEmail findFirst
   */
  export type RawEmailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEmail
     */
    select?: RawEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawEmailInclude<ExtArgs> | null
    /**
     * Filter, which RawEmail to fetch.
     */
    where?: RawEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RawEmails to fetch.
     */
    orderBy?: RawEmailOrderByWithRelationInput | RawEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RawEmails.
     */
    cursor?: RawEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RawEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RawEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RawEmails.
     */
    distinct?: RawEmailScalarFieldEnum | RawEmailScalarFieldEnum[]
  }

  /**
   * RawEmail findFirstOrThrow
   */
  export type RawEmailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEmail
     */
    select?: RawEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawEmailInclude<ExtArgs> | null
    /**
     * Filter, which RawEmail to fetch.
     */
    where?: RawEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RawEmails to fetch.
     */
    orderBy?: RawEmailOrderByWithRelationInput | RawEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RawEmails.
     */
    cursor?: RawEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RawEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RawEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RawEmails.
     */
    distinct?: RawEmailScalarFieldEnum | RawEmailScalarFieldEnum[]
  }

  /**
   * RawEmail findMany
   */
  export type RawEmailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEmail
     */
    select?: RawEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawEmailInclude<ExtArgs> | null
    /**
     * Filter, which RawEmails to fetch.
     */
    where?: RawEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RawEmails to fetch.
     */
    orderBy?: RawEmailOrderByWithRelationInput | RawEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RawEmails.
     */
    cursor?: RawEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RawEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RawEmails.
     */
    skip?: number
    distinct?: RawEmailScalarFieldEnum | RawEmailScalarFieldEnum[]
  }

  /**
   * RawEmail create
   */
  export type RawEmailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEmail
     */
    select?: RawEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawEmailInclude<ExtArgs> | null
    /**
     * The data needed to create a RawEmail.
     */
    data: XOR<RawEmailCreateInput, RawEmailUncheckedCreateInput>
  }

  /**
   * RawEmail createMany
   */
  export type RawEmailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RawEmails.
     */
    data: RawEmailCreateManyInput | RawEmailCreateManyInput[]
  }

  /**
   * RawEmail createManyAndReturn
   */
  export type RawEmailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEmail
     */
    select?: RawEmailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RawEmails.
     */
    data: RawEmailCreateManyInput | RawEmailCreateManyInput[]
  }

  /**
   * RawEmail update
   */
  export type RawEmailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEmail
     */
    select?: RawEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawEmailInclude<ExtArgs> | null
    /**
     * The data needed to update a RawEmail.
     */
    data: XOR<RawEmailUpdateInput, RawEmailUncheckedUpdateInput>
    /**
     * Choose, which RawEmail to update.
     */
    where: RawEmailWhereUniqueInput
  }

  /**
   * RawEmail updateMany
   */
  export type RawEmailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RawEmails.
     */
    data: XOR<RawEmailUpdateManyMutationInput, RawEmailUncheckedUpdateManyInput>
    /**
     * Filter which RawEmails to update
     */
    where?: RawEmailWhereInput
  }

  /**
   * RawEmail upsert
   */
  export type RawEmailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEmail
     */
    select?: RawEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawEmailInclude<ExtArgs> | null
    /**
     * The filter to search for the RawEmail to update in case it exists.
     */
    where: RawEmailWhereUniqueInput
    /**
     * In case the RawEmail found by the `where` argument doesn't exist, create a new RawEmail with this data.
     */
    create: XOR<RawEmailCreateInput, RawEmailUncheckedCreateInput>
    /**
     * In case the RawEmail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RawEmailUpdateInput, RawEmailUncheckedUpdateInput>
  }

  /**
   * RawEmail delete
   */
  export type RawEmailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEmail
     */
    select?: RawEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawEmailInclude<ExtArgs> | null
    /**
     * Filter which RawEmail to delete.
     */
    where: RawEmailWhereUniqueInput
  }

  /**
   * RawEmail deleteMany
   */
  export type RawEmailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RawEmails to delete
     */
    where?: RawEmailWhereInput
  }

  /**
   * RawEmail.dmarcReports
   */
  export type RawEmail$dmarcReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCReport
     */
    select?: DMARCReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCReportInclude<ExtArgs> | null
    where?: DMARCReportWhereInput
    orderBy?: DMARCReportOrderByWithRelationInput | DMARCReportOrderByWithRelationInput[]
    cursor?: DMARCReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DMARCReportScalarFieldEnum | DMARCReportScalarFieldEnum[]
  }

  /**
   * RawEmail without action
   */
  export type RawEmailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEmail
     */
    select?: RawEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawEmailInclude<ExtArgs> | null
  }


  /**
   * Model DMARCReport
   */

  export type AggregateDMARCReport = {
    _count: DMARCReportCountAggregateOutputType | null
    _avg: DMARCReportAvgAggregateOutputType | null
    _sum: DMARCReportSumAggregateOutputType | null
    _min: DMARCReportMinAggregateOutputType | null
    _max: DMARCReportMaxAggregateOutputType | null
  }

  export type DMARCReportAvgAggregateOutputType = {
    dateBegin: number | null
    dateEnd: number | null
  }

  export type DMARCReportSumAggregateOutputType = {
    dateBegin: number | null
    dateEnd: number | null
  }

  export type DMARCReportMinAggregateOutputType = {
    id: string | null
    rawEmailId: string | null
    org: string | null
    reportId: string | null
    domain: string | null
    dateBegin: number | null
    dateEnd: number | null
    policyAdkim: string | null
    policyAspf: string | null
    policyP: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DMARCReportMaxAggregateOutputType = {
    id: string | null
    rawEmailId: string | null
    org: string | null
    reportId: string | null
    domain: string | null
    dateBegin: number | null
    dateEnd: number | null
    policyAdkim: string | null
    policyAspf: string | null
    policyP: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DMARCReportCountAggregateOutputType = {
    id: number
    rawEmailId: number
    org: number
    reportId: number
    domain: number
    dateBegin: number
    dateEnd: number
    policyAdkim: number
    policyAspf: number
    policyP: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DMARCReportAvgAggregateInputType = {
    dateBegin?: true
    dateEnd?: true
  }

  export type DMARCReportSumAggregateInputType = {
    dateBegin?: true
    dateEnd?: true
  }

  export type DMARCReportMinAggregateInputType = {
    id?: true
    rawEmailId?: true
    org?: true
    reportId?: true
    domain?: true
    dateBegin?: true
    dateEnd?: true
    policyAdkim?: true
    policyAspf?: true
    policyP?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DMARCReportMaxAggregateInputType = {
    id?: true
    rawEmailId?: true
    org?: true
    reportId?: true
    domain?: true
    dateBegin?: true
    dateEnd?: true
    policyAdkim?: true
    policyAspf?: true
    policyP?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DMARCReportCountAggregateInputType = {
    id?: true
    rawEmailId?: true
    org?: true
    reportId?: true
    domain?: true
    dateBegin?: true
    dateEnd?: true
    policyAdkim?: true
    policyAspf?: true
    policyP?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DMARCReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DMARCReport to aggregate.
     */
    where?: DMARCReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DMARCReports to fetch.
     */
    orderBy?: DMARCReportOrderByWithRelationInput | DMARCReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DMARCReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DMARCReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DMARCReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DMARCReports
    **/
    _count?: true | DMARCReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DMARCReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DMARCReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DMARCReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DMARCReportMaxAggregateInputType
  }

  export type GetDMARCReportAggregateType<T extends DMARCReportAggregateArgs> = {
        [P in keyof T & keyof AggregateDMARCReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDMARCReport[P]>
      : GetScalarType<T[P], AggregateDMARCReport[P]>
  }




  export type DMARCReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DMARCReportWhereInput
    orderBy?: DMARCReportOrderByWithAggregationInput | DMARCReportOrderByWithAggregationInput[]
    by: DMARCReportScalarFieldEnum[] | DMARCReportScalarFieldEnum
    having?: DMARCReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DMARCReportCountAggregateInputType | true
    _avg?: DMARCReportAvgAggregateInputType
    _sum?: DMARCReportSumAggregateInputType
    _min?: DMARCReportMinAggregateInputType
    _max?: DMARCReportMaxAggregateInputType
  }

  export type DMARCReportGroupByOutputType = {
    id: string
    rawEmailId: string | null
    org: string | null
    reportId: string | null
    domain: string | null
    dateBegin: number | null
    dateEnd: number | null
    policyAdkim: string | null
    policyAspf: string | null
    policyP: string | null
    createdAt: Date
    updatedAt: Date
    _count: DMARCReportCountAggregateOutputType | null
    _avg: DMARCReportAvgAggregateOutputType | null
    _sum: DMARCReportSumAggregateOutputType | null
    _min: DMARCReportMinAggregateOutputType | null
    _max: DMARCReportMaxAggregateOutputType | null
  }

  type GetDMARCReportGroupByPayload<T extends DMARCReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DMARCReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DMARCReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DMARCReportGroupByOutputType[P]>
            : GetScalarType<T[P], DMARCReportGroupByOutputType[P]>
        }
      >
    >


  export type DMARCReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rawEmailId?: boolean
    org?: boolean
    reportId?: boolean
    domain?: boolean
    dateBegin?: boolean
    dateEnd?: boolean
    policyAdkim?: boolean
    policyAspf?: boolean
    policyP?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rawEmail?: boolean | DMARCReport$rawEmailArgs<ExtArgs>
    records?: boolean | DMARCReport$recordsArgs<ExtArgs>
    _count?: boolean | DMARCReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dMARCReport"]>

  export type DMARCReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rawEmailId?: boolean
    org?: boolean
    reportId?: boolean
    domain?: boolean
    dateBegin?: boolean
    dateEnd?: boolean
    policyAdkim?: boolean
    policyAspf?: boolean
    policyP?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rawEmail?: boolean | DMARCReport$rawEmailArgs<ExtArgs>
  }, ExtArgs["result"]["dMARCReport"]>

  export type DMARCReportSelectScalar = {
    id?: boolean
    rawEmailId?: boolean
    org?: boolean
    reportId?: boolean
    domain?: boolean
    dateBegin?: boolean
    dateEnd?: boolean
    policyAdkim?: boolean
    policyAspf?: boolean
    policyP?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DMARCReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rawEmail?: boolean | DMARCReport$rawEmailArgs<ExtArgs>
    records?: boolean | DMARCReport$recordsArgs<ExtArgs>
    _count?: boolean | DMARCReportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DMARCReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rawEmail?: boolean | DMARCReport$rawEmailArgs<ExtArgs>
  }

  export type $DMARCReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DMARCReport"
    objects: {
      rawEmail: Prisma.$RawEmailPayload<ExtArgs> | null
      records: Prisma.$DMARCRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rawEmailId: string | null
      org: string | null
      reportId: string | null
      domain: string | null
      dateBegin: number | null
      dateEnd: number | null
      policyAdkim: string | null
      policyAspf: string | null
      policyP: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dMARCReport"]>
    composites: {}
  }

  type DMARCReportGetPayload<S extends boolean | null | undefined | DMARCReportDefaultArgs> = $Result.GetResult<Prisma.$DMARCReportPayload, S>

  type DMARCReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DMARCReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DMARCReportCountAggregateInputType | true
    }

  export interface DMARCReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DMARCReport'], meta: { name: 'DMARCReport' } }
    /**
     * Find zero or one DMARCReport that matches the filter.
     * @param {DMARCReportFindUniqueArgs} args - Arguments to find a DMARCReport
     * @example
     * // Get one DMARCReport
     * const dMARCReport = await prisma.dMARCReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DMARCReportFindUniqueArgs>(args: SelectSubset<T, DMARCReportFindUniqueArgs<ExtArgs>>): Prisma__DMARCReportClient<$Result.GetResult<Prisma.$DMARCReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DMARCReport that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DMARCReportFindUniqueOrThrowArgs} args - Arguments to find a DMARCReport
     * @example
     * // Get one DMARCReport
     * const dMARCReport = await prisma.dMARCReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DMARCReportFindUniqueOrThrowArgs>(args: SelectSubset<T, DMARCReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DMARCReportClient<$Result.GetResult<Prisma.$DMARCReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DMARCReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCReportFindFirstArgs} args - Arguments to find a DMARCReport
     * @example
     * // Get one DMARCReport
     * const dMARCReport = await prisma.dMARCReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DMARCReportFindFirstArgs>(args?: SelectSubset<T, DMARCReportFindFirstArgs<ExtArgs>>): Prisma__DMARCReportClient<$Result.GetResult<Prisma.$DMARCReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DMARCReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCReportFindFirstOrThrowArgs} args - Arguments to find a DMARCReport
     * @example
     * // Get one DMARCReport
     * const dMARCReport = await prisma.dMARCReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DMARCReportFindFirstOrThrowArgs>(args?: SelectSubset<T, DMARCReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__DMARCReportClient<$Result.GetResult<Prisma.$DMARCReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DMARCReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DMARCReports
     * const dMARCReports = await prisma.dMARCReport.findMany()
     * 
     * // Get first 10 DMARCReports
     * const dMARCReports = await prisma.dMARCReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dMARCReportWithIdOnly = await prisma.dMARCReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DMARCReportFindManyArgs>(args?: SelectSubset<T, DMARCReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DMARCReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DMARCReport.
     * @param {DMARCReportCreateArgs} args - Arguments to create a DMARCReport.
     * @example
     * // Create one DMARCReport
     * const DMARCReport = await prisma.dMARCReport.create({
     *   data: {
     *     // ... data to create a DMARCReport
     *   }
     * })
     * 
     */
    create<T extends DMARCReportCreateArgs>(args: SelectSubset<T, DMARCReportCreateArgs<ExtArgs>>): Prisma__DMARCReportClient<$Result.GetResult<Prisma.$DMARCReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DMARCReports.
     * @param {DMARCReportCreateManyArgs} args - Arguments to create many DMARCReports.
     * @example
     * // Create many DMARCReports
     * const dMARCReport = await prisma.dMARCReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DMARCReportCreateManyArgs>(args?: SelectSubset<T, DMARCReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DMARCReports and returns the data saved in the database.
     * @param {DMARCReportCreateManyAndReturnArgs} args - Arguments to create many DMARCReports.
     * @example
     * // Create many DMARCReports
     * const dMARCReport = await prisma.dMARCReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DMARCReports and only return the `id`
     * const dMARCReportWithIdOnly = await prisma.dMARCReport.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DMARCReportCreateManyAndReturnArgs>(args?: SelectSubset<T, DMARCReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DMARCReportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DMARCReport.
     * @param {DMARCReportDeleteArgs} args - Arguments to delete one DMARCReport.
     * @example
     * // Delete one DMARCReport
     * const DMARCReport = await prisma.dMARCReport.delete({
     *   where: {
     *     // ... filter to delete one DMARCReport
     *   }
     * })
     * 
     */
    delete<T extends DMARCReportDeleteArgs>(args: SelectSubset<T, DMARCReportDeleteArgs<ExtArgs>>): Prisma__DMARCReportClient<$Result.GetResult<Prisma.$DMARCReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DMARCReport.
     * @param {DMARCReportUpdateArgs} args - Arguments to update one DMARCReport.
     * @example
     * // Update one DMARCReport
     * const dMARCReport = await prisma.dMARCReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DMARCReportUpdateArgs>(args: SelectSubset<T, DMARCReportUpdateArgs<ExtArgs>>): Prisma__DMARCReportClient<$Result.GetResult<Prisma.$DMARCReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DMARCReports.
     * @param {DMARCReportDeleteManyArgs} args - Arguments to filter DMARCReports to delete.
     * @example
     * // Delete a few DMARCReports
     * const { count } = await prisma.dMARCReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DMARCReportDeleteManyArgs>(args?: SelectSubset<T, DMARCReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DMARCReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DMARCReports
     * const dMARCReport = await prisma.dMARCReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DMARCReportUpdateManyArgs>(args: SelectSubset<T, DMARCReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DMARCReport.
     * @param {DMARCReportUpsertArgs} args - Arguments to update or create a DMARCReport.
     * @example
     * // Update or create a DMARCReport
     * const dMARCReport = await prisma.dMARCReport.upsert({
     *   create: {
     *     // ... data to create a DMARCReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DMARCReport we want to update
     *   }
     * })
     */
    upsert<T extends DMARCReportUpsertArgs>(args: SelectSubset<T, DMARCReportUpsertArgs<ExtArgs>>): Prisma__DMARCReportClient<$Result.GetResult<Prisma.$DMARCReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DMARCReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCReportCountArgs} args - Arguments to filter DMARCReports to count.
     * @example
     * // Count the number of DMARCReports
     * const count = await prisma.dMARCReport.count({
     *   where: {
     *     // ... the filter for the DMARCReports we want to count
     *   }
     * })
    **/
    count<T extends DMARCReportCountArgs>(
      args?: Subset<T, DMARCReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DMARCReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DMARCReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DMARCReportAggregateArgs>(args: Subset<T, DMARCReportAggregateArgs>): Prisma.PrismaPromise<GetDMARCReportAggregateType<T>>

    /**
     * Group by DMARCReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DMARCReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DMARCReportGroupByArgs['orderBy'] }
        : { orderBy?: DMARCReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DMARCReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDMARCReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DMARCReport model
   */
  readonly fields: DMARCReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DMARCReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DMARCReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rawEmail<T extends DMARCReport$rawEmailArgs<ExtArgs> = {}>(args?: Subset<T, DMARCReport$rawEmailArgs<ExtArgs>>): Prisma__RawEmailClient<$Result.GetResult<Prisma.$RawEmailPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    records<T extends DMARCReport$recordsArgs<ExtArgs> = {}>(args?: Subset<T, DMARCReport$recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DMARCRecordPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DMARCReport model
   */ 
  interface DMARCReportFieldRefs {
    readonly id: FieldRef<"DMARCReport", 'String'>
    readonly rawEmailId: FieldRef<"DMARCReport", 'String'>
    readonly org: FieldRef<"DMARCReport", 'String'>
    readonly reportId: FieldRef<"DMARCReport", 'String'>
    readonly domain: FieldRef<"DMARCReport", 'String'>
    readonly dateBegin: FieldRef<"DMARCReport", 'Int'>
    readonly dateEnd: FieldRef<"DMARCReport", 'Int'>
    readonly policyAdkim: FieldRef<"DMARCReport", 'String'>
    readonly policyAspf: FieldRef<"DMARCReport", 'String'>
    readonly policyP: FieldRef<"DMARCReport", 'String'>
    readonly createdAt: FieldRef<"DMARCReport", 'DateTime'>
    readonly updatedAt: FieldRef<"DMARCReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DMARCReport findUnique
   */
  export type DMARCReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCReport
     */
    select?: DMARCReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCReportInclude<ExtArgs> | null
    /**
     * Filter, which DMARCReport to fetch.
     */
    where: DMARCReportWhereUniqueInput
  }

  /**
   * DMARCReport findUniqueOrThrow
   */
  export type DMARCReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCReport
     */
    select?: DMARCReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCReportInclude<ExtArgs> | null
    /**
     * Filter, which DMARCReport to fetch.
     */
    where: DMARCReportWhereUniqueInput
  }

  /**
   * DMARCReport findFirst
   */
  export type DMARCReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCReport
     */
    select?: DMARCReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCReportInclude<ExtArgs> | null
    /**
     * Filter, which DMARCReport to fetch.
     */
    where?: DMARCReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DMARCReports to fetch.
     */
    orderBy?: DMARCReportOrderByWithRelationInput | DMARCReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DMARCReports.
     */
    cursor?: DMARCReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DMARCReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DMARCReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DMARCReports.
     */
    distinct?: DMARCReportScalarFieldEnum | DMARCReportScalarFieldEnum[]
  }

  /**
   * DMARCReport findFirstOrThrow
   */
  export type DMARCReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCReport
     */
    select?: DMARCReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCReportInclude<ExtArgs> | null
    /**
     * Filter, which DMARCReport to fetch.
     */
    where?: DMARCReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DMARCReports to fetch.
     */
    orderBy?: DMARCReportOrderByWithRelationInput | DMARCReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DMARCReports.
     */
    cursor?: DMARCReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DMARCReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DMARCReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DMARCReports.
     */
    distinct?: DMARCReportScalarFieldEnum | DMARCReportScalarFieldEnum[]
  }

  /**
   * DMARCReport findMany
   */
  export type DMARCReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCReport
     */
    select?: DMARCReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCReportInclude<ExtArgs> | null
    /**
     * Filter, which DMARCReports to fetch.
     */
    where?: DMARCReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DMARCReports to fetch.
     */
    orderBy?: DMARCReportOrderByWithRelationInput | DMARCReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DMARCReports.
     */
    cursor?: DMARCReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DMARCReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DMARCReports.
     */
    skip?: number
    distinct?: DMARCReportScalarFieldEnum | DMARCReportScalarFieldEnum[]
  }

  /**
   * DMARCReport create
   */
  export type DMARCReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCReport
     */
    select?: DMARCReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCReportInclude<ExtArgs> | null
    /**
     * The data needed to create a DMARCReport.
     */
    data: XOR<DMARCReportCreateInput, DMARCReportUncheckedCreateInput>
  }

  /**
   * DMARCReport createMany
   */
  export type DMARCReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DMARCReports.
     */
    data: DMARCReportCreateManyInput | DMARCReportCreateManyInput[]
  }

  /**
   * DMARCReport createManyAndReturn
   */
  export type DMARCReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCReport
     */
    select?: DMARCReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DMARCReports.
     */
    data: DMARCReportCreateManyInput | DMARCReportCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DMARCReport update
   */
  export type DMARCReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCReport
     */
    select?: DMARCReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCReportInclude<ExtArgs> | null
    /**
     * The data needed to update a DMARCReport.
     */
    data: XOR<DMARCReportUpdateInput, DMARCReportUncheckedUpdateInput>
    /**
     * Choose, which DMARCReport to update.
     */
    where: DMARCReportWhereUniqueInput
  }

  /**
   * DMARCReport updateMany
   */
  export type DMARCReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DMARCReports.
     */
    data: XOR<DMARCReportUpdateManyMutationInput, DMARCReportUncheckedUpdateManyInput>
    /**
     * Filter which DMARCReports to update
     */
    where?: DMARCReportWhereInput
  }

  /**
   * DMARCReport upsert
   */
  export type DMARCReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCReport
     */
    select?: DMARCReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCReportInclude<ExtArgs> | null
    /**
     * The filter to search for the DMARCReport to update in case it exists.
     */
    where: DMARCReportWhereUniqueInput
    /**
     * In case the DMARCReport found by the `where` argument doesn't exist, create a new DMARCReport with this data.
     */
    create: XOR<DMARCReportCreateInput, DMARCReportUncheckedCreateInput>
    /**
     * In case the DMARCReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DMARCReportUpdateInput, DMARCReportUncheckedUpdateInput>
  }

  /**
   * DMARCReport delete
   */
  export type DMARCReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCReport
     */
    select?: DMARCReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCReportInclude<ExtArgs> | null
    /**
     * Filter which DMARCReport to delete.
     */
    where: DMARCReportWhereUniqueInput
  }

  /**
   * DMARCReport deleteMany
   */
  export type DMARCReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DMARCReports to delete
     */
    where?: DMARCReportWhereInput
  }

  /**
   * DMARCReport.rawEmail
   */
  export type DMARCReport$rawEmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEmail
     */
    select?: RawEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawEmailInclude<ExtArgs> | null
    where?: RawEmailWhereInput
  }

  /**
   * DMARCReport.records
   */
  export type DMARCReport$recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCRecord
     */
    select?: DMARCRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCRecordInclude<ExtArgs> | null
    where?: DMARCRecordWhereInput
    orderBy?: DMARCRecordOrderByWithRelationInput | DMARCRecordOrderByWithRelationInput[]
    cursor?: DMARCRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DMARCRecordScalarFieldEnum | DMARCRecordScalarFieldEnum[]
  }

  /**
   * DMARCReport without action
   */
  export type DMARCReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCReport
     */
    select?: DMARCReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCReportInclude<ExtArgs> | null
  }


  /**
   * Model DMARCRecord
   */

  export type AggregateDMARCRecord = {
    _count: DMARCRecordCountAggregateOutputType | null
    _avg: DMARCRecordAvgAggregateOutputType | null
    _sum: DMARCRecordSumAggregateOutputType | null
    _min: DMARCRecordMinAggregateOutputType | null
    _max: DMARCRecordMaxAggregateOutputType | null
  }

  export type DMARCRecordAvgAggregateOutputType = {
    count: number | null
  }

  export type DMARCRecordSumAggregateOutputType = {
    count: number | null
  }

  export type DMARCRecordMinAggregateOutputType = {
    id: string | null
    reportId: string | null
    sourceIp: string | null
    count: number | null
    disposition: string | null
    dkim: string | null
    spf: string | null
    headerFrom: string | null
    authDkim: string | null
    authSpf: string | null
    createdAt: Date | null
  }

  export type DMARCRecordMaxAggregateOutputType = {
    id: string | null
    reportId: string | null
    sourceIp: string | null
    count: number | null
    disposition: string | null
    dkim: string | null
    spf: string | null
    headerFrom: string | null
    authDkim: string | null
    authSpf: string | null
    createdAt: Date | null
  }

  export type DMARCRecordCountAggregateOutputType = {
    id: number
    reportId: number
    sourceIp: number
    count: number
    disposition: number
    dkim: number
    spf: number
    headerFrom: number
    authDkim: number
    authSpf: number
    createdAt: number
    _all: number
  }


  export type DMARCRecordAvgAggregateInputType = {
    count?: true
  }

  export type DMARCRecordSumAggregateInputType = {
    count?: true
  }

  export type DMARCRecordMinAggregateInputType = {
    id?: true
    reportId?: true
    sourceIp?: true
    count?: true
    disposition?: true
    dkim?: true
    spf?: true
    headerFrom?: true
    authDkim?: true
    authSpf?: true
    createdAt?: true
  }

  export type DMARCRecordMaxAggregateInputType = {
    id?: true
    reportId?: true
    sourceIp?: true
    count?: true
    disposition?: true
    dkim?: true
    spf?: true
    headerFrom?: true
    authDkim?: true
    authSpf?: true
    createdAt?: true
  }

  export type DMARCRecordCountAggregateInputType = {
    id?: true
    reportId?: true
    sourceIp?: true
    count?: true
    disposition?: true
    dkim?: true
    spf?: true
    headerFrom?: true
    authDkim?: true
    authSpf?: true
    createdAt?: true
    _all?: true
  }

  export type DMARCRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DMARCRecord to aggregate.
     */
    where?: DMARCRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DMARCRecords to fetch.
     */
    orderBy?: DMARCRecordOrderByWithRelationInput | DMARCRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DMARCRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DMARCRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DMARCRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DMARCRecords
    **/
    _count?: true | DMARCRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DMARCRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DMARCRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DMARCRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DMARCRecordMaxAggregateInputType
  }

  export type GetDMARCRecordAggregateType<T extends DMARCRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateDMARCRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDMARCRecord[P]>
      : GetScalarType<T[P], AggregateDMARCRecord[P]>
  }




  export type DMARCRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DMARCRecordWhereInput
    orderBy?: DMARCRecordOrderByWithAggregationInput | DMARCRecordOrderByWithAggregationInput[]
    by: DMARCRecordScalarFieldEnum[] | DMARCRecordScalarFieldEnum
    having?: DMARCRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DMARCRecordCountAggregateInputType | true
    _avg?: DMARCRecordAvgAggregateInputType
    _sum?: DMARCRecordSumAggregateInputType
    _min?: DMARCRecordMinAggregateInputType
    _max?: DMARCRecordMaxAggregateInputType
  }

  export type DMARCRecordGroupByOutputType = {
    id: string
    reportId: string
    sourceIp: string | null
    count: number | null
    disposition: string | null
    dkim: string | null
    spf: string | null
    headerFrom: string | null
    authDkim: string | null
    authSpf: string | null
    createdAt: Date
    _count: DMARCRecordCountAggregateOutputType | null
    _avg: DMARCRecordAvgAggregateOutputType | null
    _sum: DMARCRecordSumAggregateOutputType | null
    _min: DMARCRecordMinAggregateOutputType | null
    _max: DMARCRecordMaxAggregateOutputType | null
  }

  type GetDMARCRecordGroupByPayload<T extends DMARCRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DMARCRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DMARCRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DMARCRecordGroupByOutputType[P]>
            : GetScalarType<T[P], DMARCRecordGroupByOutputType[P]>
        }
      >
    >


  export type DMARCRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    sourceIp?: boolean
    count?: boolean
    disposition?: boolean
    dkim?: boolean
    spf?: boolean
    headerFrom?: boolean
    authDkim?: boolean
    authSpf?: boolean
    createdAt?: boolean
    report?: boolean | DMARCReportDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dMARCRecord"]>

  export type DMARCRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    sourceIp?: boolean
    count?: boolean
    disposition?: boolean
    dkim?: boolean
    spf?: boolean
    headerFrom?: boolean
    authDkim?: boolean
    authSpf?: boolean
    createdAt?: boolean
    report?: boolean | DMARCReportDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dMARCRecord"]>

  export type DMARCRecordSelectScalar = {
    id?: boolean
    reportId?: boolean
    sourceIp?: boolean
    count?: boolean
    disposition?: boolean
    dkim?: boolean
    spf?: boolean
    headerFrom?: boolean
    authDkim?: boolean
    authSpf?: boolean
    createdAt?: boolean
  }

  export type DMARCRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | DMARCReportDefaultArgs<ExtArgs>
  }
  export type DMARCRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | DMARCReportDefaultArgs<ExtArgs>
  }

  export type $DMARCRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DMARCRecord"
    objects: {
      report: Prisma.$DMARCReportPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reportId: string
      sourceIp: string | null
      count: number | null
      disposition: string | null
      dkim: string | null
      spf: string | null
      headerFrom: string | null
      authDkim: string | null
      authSpf: string | null
      createdAt: Date
    }, ExtArgs["result"]["dMARCRecord"]>
    composites: {}
  }

  type DMARCRecordGetPayload<S extends boolean | null | undefined | DMARCRecordDefaultArgs> = $Result.GetResult<Prisma.$DMARCRecordPayload, S>

  type DMARCRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DMARCRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DMARCRecordCountAggregateInputType | true
    }

  export interface DMARCRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DMARCRecord'], meta: { name: 'DMARCRecord' } }
    /**
     * Find zero or one DMARCRecord that matches the filter.
     * @param {DMARCRecordFindUniqueArgs} args - Arguments to find a DMARCRecord
     * @example
     * // Get one DMARCRecord
     * const dMARCRecord = await prisma.dMARCRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DMARCRecordFindUniqueArgs>(args: SelectSubset<T, DMARCRecordFindUniqueArgs<ExtArgs>>): Prisma__DMARCRecordClient<$Result.GetResult<Prisma.$DMARCRecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DMARCRecord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DMARCRecordFindUniqueOrThrowArgs} args - Arguments to find a DMARCRecord
     * @example
     * // Get one DMARCRecord
     * const dMARCRecord = await prisma.dMARCRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DMARCRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, DMARCRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DMARCRecordClient<$Result.GetResult<Prisma.$DMARCRecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DMARCRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCRecordFindFirstArgs} args - Arguments to find a DMARCRecord
     * @example
     * // Get one DMARCRecord
     * const dMARCRecord = await prisma.dMARCRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DMARCRecordFindFirstArgs>(args?: SelectSubset<T, DMARCRecordFindFirstArgs<ExtArgs>>): Prisma__DMARCRecordClient<$Result.GetResult<Prisma.$DMARCRecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DMARCRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCRecordFindFirstOrThrowArgs} args - Arguments to find a DMARCRecord
     * @example
     * // Get one DMARCRecord
     * const dMARCRecord = await prisma.dMARCRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DMARCRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, DMARCRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__DMARCRecordClient<$Result.GetResult<Prisma.$DMARCRecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DMARCRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DMARCRecords
     * const dMARCRecords = await prisma.dMARCRecord.findMany()
     * 
     * // Get first 10 DMARCRecords
     * const dMARCRecords = await prisma.dMARCRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dMARCRecordWithIdOnly = await prisma.dMARCRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DMARCRecordFindManyArgs>(args?: SelectSubset<T, DMARCRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DMARCRecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DMARCRecord.
     * @param {DMARCRecordCreateArgs} args - Arguments to create a DMARCRecord.
     * @example
     * // Create one DMARCRecord
     * const DMARCRecord = await prisma.dMARCRecord.create({
     *   data: {
     *     // ... data to create a DMARCRecord
     *   }
     * })
     * 
     */
    create<T extends DMARCRecordCreateArgs>(args: SelectSubset<T, DMARCRecordCreateArgs<ExtArgs>>): Prisma__DMARCRecordClient<$Result.GetResult<Prisma.$DMARCRecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DMARCRecords.
     * @param {DMARCRecordCreateManyArgs} args - Arguments to create many DMARCRecords.
     * @example
     * // Create many DMARCRecords
     * const dMARCRecord = await prisma.dMARCRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DMARCRecordCreateManyArgs>(args?: SelectSubset<T, DMARCRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DMARCRecords and returns the data saved in the database.
     * @param {DMARCRecordCreateManyAndReturnArgs} args - Arguments to create many DMARCRecords.
     * @example
     * // Create many DMARCRecords
     * const dMARCRecord = await prisma.dMARCRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DMARCRecords and only return the `id`
     * const dMARCRecordWithIdOnly = await prisma.dMARCRecord.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DMARCRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, DMARCRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DMARCRecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DMARCRecord.
     * @param {DMARCRecordDeleteArgs} args - Arguments to delete one DMARCRecord.
     * @example
     * // Delete one DMARCRecord
     * const DMARCRecord = await prisma.dMARCRecord.delete({
     *   where: {
     *     // ... filter to delete one DMARCRecord
     *   }
     * })
     * 
     */
    delete<T extends DMARCRecordDeleteArgs>(args: SelectSubset<T, DMARCRecordDeleteArgs<ExtArgs>>): Prisma__DMARCRecordClient<$Result.GetResult<Prisma.$DMARCRecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DMARCRecord.
     * @param {DMARCRecordUpdateArgs} args - Arguments to update one DMARCRecord.
     * @example
     * // Update one DMARCRecord
     * const dMARCRecord = await prisma.dMARCRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DMARCRecordUpdateArgs>(args: SelectSubset<T, DMARCRecordUpdateArgs<ExtArgs>>): Prisma__DMARCRecordClient<$Result.GetResult<Prisma.$DMARCRecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DMARCRecords.
     * @param {DMARCRecordDeleteManyArgs} args - Arguments to filter DMARCRecords to delete.
     * @example
     * // Delete a few DMARCRecords
     * const { count } = await prisma.dMARCRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DMARCRecordDeleteManyArgs>(args?: SelectSubset<T, DMARCRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DMARCRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DMARCRecords
     * const dMARCRecord = await prisma.dMARCRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DMARCRecordUpdateManyArgs>(args: SelectSubset<T, DMARCRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DMARCRecord.
     * @param {DMARCRecordUpsertArgs} args - Arguments to update or create a DMARCRecord.
     * @example
     * // Update or create a DMARCRecord
     * const dMARCRecord = await prisma.dMARCRecord.upsert({
     *   create: {
     *     // ... data to create a DMARCRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DMARCRecord we want to update
     *   }
     * })
     */
    upsert<T extends DMARCRecordUpsertArgs>(args: SelectSubset<T, DMARCRecordUpsertArgs<ExtArgs>>): Prisma__DMARCRecordClient<$Result.GetResult<Prisma.$DMARCRecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DMARCRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCRecordCountArgs} args - Arguments to filter DMARCRecords to count.
     * @example
     * // Count the number of DMARCRecords
     * const count = await prisma.dMARCRecord.count({
     *   where: {
     *     // ... the filter for the DMARCRecords we want to count
     *   }
     * })
    **/
    count<T extends DMARCRecordCountArgs>(
      args?: Subset<T, DMARCRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DMARCRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DMARCRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DMARCRecordAggregateArgs>(args: Subset<T, DMARCRecordAggregateArgs>): Prisma.PrismaPromise<GetDMARCRecordAggregateType<T>>

    /**
     * Group by DMARCRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DMARCRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DMARCRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DMARCRecordGroupByArgs['orderBy'] }
        : { orderBy?: DMARCRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DMARCRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDMARCRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DMARCRecord model
   */
  readonly fields: DMARCRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DMARCRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DMARCRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    report<T extends DMARCReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DMARCReportDefaultArgs<ExtArgs>>): Prisma__DMARCReportClient<$Result.GetResult<Prisma.$DMARCReportPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DMARCRecord model
   */ 
  interface DMARCRecordFieldRefs {
    readonly id: FieldRef<"DMARCRecord", 'String'>
    readonly reportId: FieldRef<"DMARCRecord", 'String'>
    readonly sourceIp: FieldRef<"DMARCRecord", 'String'>
    readonly count: FieldRef<"DMARCRecord", 'Int'>
    readonly disposition: FieldRef<"DMARCRecord", 'String'>
    readonly dkim: FieldRef<"DMARCRecord", 'String'>
    readonly spf: FieldRef<"DMARCRecord", 'String'>
    readonly headerFrom: FieldRef<"DMARCRecord", 'String'>
    readonly authDkim: FieldRef<"DMARCRecord", 'String'>
    readonly authSpf: FieldRef<"DMARCRecord", 'String'>
    readonly createdAt: FieldRef<"DMARCRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DMARCRecord findUnique
   */
  export type DMARCRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCRecord
     */
    select?: DMARCRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCRecordInclude<ExtArgs> | null
    /**
     * Filter, which DMARCRecord to fetch.
     */
    where: DMARCRecordWhereUniqueInput
  }

  /**
   * DMARCRecord findUniqueOrThrow
   */
  export type DMARCRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCRecord
     */
    select?: DMARCRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCRecordInclude<ExtArgs> | null
    /**
     * Filter, which DMARCRecord to fetch.
     */
    where: DMARCRecordWhereUniqueInput
  }

  /**
   * DMARCRecord findFirst
   */
  export type DMARCRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCRecord
     */
    select?: DMARCRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCRecordInclude<ExtArgs> | null
    /**
     * Filter, which DMARCRecord to fetch.
     */
    where?: DMARCRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DMARCRecords to fetch.
     */
    orderBy?: DMARCRecordOrderByWithRelationInput | DMARCRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DMARCRecords.
     */
    cursor?: DMARCRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DMARCRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DMARCRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DMARCRecords.
     */
    distinct?: DMARCRecordScalarFieldEnum | DMARCRecordScalarFieldEnum[]
  }

  /**
   * DMARCRecord findFirstOrThrow
   */
  export type DMARCRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCRecord
     */
    select?: DMARCRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCRecordInclude<ExtArgs> | null
    /**
     * Filter, which DMARCRecord to fetch.
     */
    where?: DMARCRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DMARCRecords to fetch.
     */
    orderBy?: DMARCRecordOrderByWithRelationInput | DMARCRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DMARCRecords.
     */
    cursor?: DMARCRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DMARCRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DMARCRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DMARCRecords.
     */
    distinct?: DMARCRecordScalarFieldEnum | DMARCRecordScalarFieldEnum[]
  }

  /**
   * DMARCRecord findMany
   */
  export type DMARCRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCRecord
     */
    select?: DMARCRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCRecordInclude<ExtArgs> | null
    /**
     * Filter, which DMARCRecords to fetch.
     */
    where?: DMARCRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DMARCRecords to fetch.
     */
    orderBy?: DMARCRecordOrderByWithRelationInput | DMARCRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DMARCRecords.
     */
    cursor?: DMARCRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DMARCRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DMARCRecords.
     */
    skip?: number
    distinct?: DMARCRecordScalarFieldEnum | DMARCRecordScalarFieldEnum[]
  }

  /**
   * DMARCRecord create
   */
  export type DMARCRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCRecord
     */
    select?: DMARCRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a DMARCRecord.
     */
    data: XOR<DMARCRecordCreateInput, DMARCRecordUncheckedCreateInput>
  }

  /**
   * DMARCRecord createMany
   */
  export type DMARCRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DMARCRecords.
     */
    data: DMARCRecordCreateManyInput | DMARCRecordCreateManyInput[]
  }

  /**
   * DMARCRecord createManyAndReturn
   */
  export type DMARCRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCRecord
     */
    select?: DMARCRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DMARCRecords.
     */
    data: DMARCRecordCreateManyInput | DMARCRecordCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DMARCRecord update
   */
  export type DMARCRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCRecord
     */
    select?: DMARCRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a DMARCRecord.
     */
    data: XOR<DMARCRecordUpdateInput, DMARCRecordUncheckedUpdateInput>
    /**
     * Choose, which DMARCRecord to update.
     */
    where: DMARCRecordWhereUniqueInput
  }

  /**
   * DMARCRecord updateMany
   */
  export type DMARCRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DMARCRecords.
     */
    data: XOR<DMARCRecordUpdateManyMutationInput, DMARCRecordUncheckedUpdateManyInput>
    /**
     * Filter which DMARCRecords to update
     */
    where?: DMARCRecordWhereInput
  }

  /**
   * DMARCRecord upsert
   */
  export type DMARCRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCRecord
     */
    select?: DMARCRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the DMARCRecord to update in case it exists.
     */
    where: DMARCRecordWhereUniqueInput
    /**
     * In case the DMARCRecord found by the `where` argument doesn't exist, create a new DMARCRecord with this data.
     */
    create: XOR<DMARCRecordCreateInput, DMARCRecordUncheckedCreateInput>
    /**
     * In case the DMARCRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DMARCRecordUpdateInput, DMARCRecordUncheckedUpdateInput>
  }

  /**
   * DMARCRecord delete
   */
  export type DMARCRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCRecord
     */
    select?: DMARCRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCRecordInclude<ExtArgs> | null
    /**
     * Filter which DMARCRecord to delete.
     */
    where: DMARCRecordWhereUniqueInput
  }

  /**
   * DMARCRecord deleteMany
   */
  export type DMARCRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DMARCRecords to delete
     */
    where?: DMARCRecordWhereInput
  }

  /**
   * DMARCRecord without action
   */
  export type DMARCRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DMARCRecord
     */
    select?: DMARCRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DMARCRecordInclude<ExtArgs> | null
  }


  /**
   * Model SentEmail
   */

  export type AggregateSentEmail = {
    _count: SentEmailCountAggregateOutputType | null
    _min: SentEmailMinAggregateOutputType | null
    _max: SentEmailMaxAggregateOutputType | null
  }

  export type SentEmailMinAggregateOutputType = {
    id: string | null
    messageId: string | null
    from: string | null
    to: string | null
    cc: string | null
    subject: string | null
    bodyText: string | null
    bodyHtml: string | null
    attachments: string | null
    status: string | null
    providerId: string | null
    error: string | null
    createdAt: Date | null
    sentAt: Date | null
  }

  export type SentEmailMaxAggregateOutputType = {
    id: string | null
    messageId: string | null
    from: string | null
    to: string | null
    cc: string | null
    subject: string | null
    bodyText: string | null
    bodyHtml: string | null
    attachments: string | null
    status: string | null
    providerId: string | null
    error: string | null
    createdAt: Date | null
    sentAt: Date | null
  }

  export type SentEmailCountAggregateOutputType = {
    id: number
    messageId: number
    from: number
    to: number
    cc: number
    subject: number
    bodyText: number
    bodyHtml: number
    attachments: number
    status: number
    providerId: number
    error: number
    createdAt: number
    sentAt: number
    _all: number
  }


  export type SentEmailMinAggregateInputType = {
    id?: true
    messageId?: true
    from?: true
    to?: true
    cc?: true
    subject?: true
    bodyText?: true
    bodyHtml?: true
    attachments?: true
    status?: true
    providerId?: true
    error?: true
    createdAt?: true
    sentAt?: true
  }

  export type SentEmailMaxAggregateInputType = {
    id?: true
    messageId?: true
    from?: true
    to?: true
    cc?: true
    subject?: true
    bodyText?: true
    bodyHtml?: true
    attachments?: true
    status?: true
    providerId?: true
    error?: true
    createdAt?: true
    sentAt?: true
  }

  export type SentEmailCountAggregateInputType = {
    id?: true
    messageId?: true
    from?: true
    to?: true
    cc?: true
    subject?: true
    bodyText?: true
    bodyHtml?: true
    attachments?: true
    status?: true
    providerId?: true
    error?: true
    createdAt?: true
    sentAt?: true
    _all?: true
  }

  export type SentEmailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SentEmail to aggregate.
     */
    where?: SentEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SentEmails to fetch.
     */
    orderBy?: SentEmailOrderByWithRelationInput | SentEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SentEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SentEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SentEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SentEmails
    **/
    _count?: true | SentEmailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SentEmailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SentEmailMaxAggregateInputType
  }

  export type GetSentEmailAggregateType<T extends SentEmailAggregateArgs> = {
        [P in keyof T & keyof AggregateSentEmail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSentEmail[P]>
      : GetScalarType<T[P], AggregateSentEmail[P]>
  }




  export type SentEmailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SentEmailWhereInput
    orderBy?: SentEmailOrderByWithAggregationInput | SentEmailOrderByWithAggregationInput[]
    by: SentEmailScalarFieldEnum[] | SentEmailScalarFieldEnum
    having?: SentEmailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SentEmailCountAggregateInputType | true
    _min?: SentEmailMinAggregateInputType
    _max?: SentEmailMaxAggregateInputType
  }

  export type SentEmailGroupByOutputType = {
    id: string
    messageId: string | null
    from: string
    to: string
    cc: string | null
    subject: string | null
    bodyText: string | null
    bodyHtml: string | null
    attachments: string | null
    status: string
    providerId: string | null
    error: string | null
    createdAt: Date
    sentAt: Date | null
    _count: SentEmailCountAggregateOutputType | null
    _min: SentEmailMinAggregateOutputType | null
    _max: SentEmailMaxAggregateOutputType | null
  }

  type GetSentEmailGroupByPayload<T extends SentEmailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SentEmailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SentEmailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SentEmailGroupByOutputType[P]>
            : GetScalarType<T[P], SentEmailGroupByOutputType[P]>
        }
      >
    >


  export type SentEmailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    from?: boolean
    to?: boolean
    cc?: boolean
    subject?: boolean
    bodyText?: boolean
    bodyHtml?: boolean
    attachments?: boolean
    status?: boolean
    providerId?: boolean
    error?: boolean
    createdAt?: boolean
    sentAt?: boolean
  }, ExtArgs["result"]["sentEmail"]>

  export type SentEmailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    from?: boolean
    to?: boolean
    cc?: boolean
    subject?: boolean
    bodyText?: boolean
    bodyHtml?: boolean
    attachments?: boolean
    status?: boolean
    providerId?: boolean
    error?: boolean
    createdAt?: boolean
    sentAt?: boolean
  }, ExtArgs["result"]["sentEmail"]>

  export type SentEmailSelectScalar = {
    id?: boolean
    messageId?: boolean
    from?: boolean
    to?: boolean
    cc?: boolean
    subject?: boolean
    bodyText?: boolean
    bodyHtml?: boolean
    attachments?: boolean
    status?: boolean
    providerId?: boolean
    error?: boolean
    createdAt?: boolean
    sentAt?: boolean
  }


  export type $SentEmailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SentEmail"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      messageId: string | null
      from: string
      to: string
      cc: string | null
      subject: string | null
      bodyText: string | null
      bodyHtml: string | null
      attachments: string | null
      status: string
      providerId: string | null
      error: string | null
      createdAt: Date
      sentAt: Date | null
    }, ExtArgs["result"]["sentEmail"]>
    composites: {}
  }

  type SentEmailGetPayload<S extends boolean | null | undefined | SentEmailDefaultArgs> = $Result.GetResult<Prisma.$SentEmailPayload, S>

  type SentEmailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SentEmailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SentEmailCountAggregateInputType | true
    }

  export interface SentEmailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SentEmail'], meta: { name: 'SentEmail' } }
    /**
     * Find zero or one SentEmail that matches the filter.
     * @param {SentEmailFindUniqueArgs} args - Arguments to find a SentEmail
     * @example
     * // Get one SentEmail
     * const sentEmail = await prisma.sentEmail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SentEmailFindUniqueArgs>(args: SelectSubset<T, SentEmailFindUniqueArgs<ExtArgs>>): Prisma__SentEmailClient<$Result.GetResult<Prisma.$SentEmailPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SentEmail that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SentEmailFindUniqueOrThrowArgs} args - Arguments to find a SentEmail
     * @example
     * // Get one SentEmail
     * const sentEmail = await prisma.sentEmail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SentEmailFindUniqueOrThrowArgs>(args: SelectSubset<T, SentEmailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SentEmailClient<$Result.GetResult<Prisma.$SentEmailPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SentEmail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailFindFirstArgs} args - Arguments to find a SentEmail
     * @example
     * // Get one SentEmail
     * const sentEmail = await prisma.sentEmail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SentEmailFindFirstArgs>(args?: SelectSubset<T, SentEmailFindFirstArgs<ExtArgs>>): Prisma__SentEmailClient<$Result.GetResult<Prisma.$SentEmailPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SentEmail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailFindFirstOrThrowArgs} args - Arguments to find a SentEmail
     * @example
     * // Get one SentEmail
     * const sentEmail = await prisma.sentEmail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SentEmailFindFirstOrThrowArgs>(args?: SelectSubset<T, SentEmailFindFirstOrThrowArgs<ExtArgs>>): Prisma__SentEmailClient<$Result.GetResult<Prisma.$SentEmailPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SentEmails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SentEmails
     * const sentEmails = await prisma.sentEmail.findMany()
     * 
     * // Get first 10 SentEmails
     * const sentEmails = await prisma.sentEmail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sentEmailWithIdOnly = await prisma.sentEmail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SentEmailFindManyArgs>(args?: SelectSubset<T, SentEmailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SentEmailPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SentEmail.
     * @param {SentEmailCreateArgs} args - Arguments to create a SentEmail.
     * @example
     * // Create one SentEmail
     * const SentEmail = await prisma.sentEmail.create({
     *   data: {
     *     // ... data to create a SentEmail
     *   }
     * })
     * 
     */
    create<T extends SentEmailCreateArgs>(args: SelectSubset<T, SentEmailCreateArgs<ExtArgs>>): Prisma__SentEmailClient<$Result.GetResult<Prisma.$SentEmailPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SentEmails.
     * @param {SentEmailCreateManyArgs} args - Arguments to create many SentEmails.
     * @example
     * // Create many SentEmails
     * const sentEmail = await prisma.sentEmail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SentEmailCreateManyArgs>(args?: SelectSubset<T, SentEmailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SentEmails and returns the data saved in the database.
     * @param {SentEmailCreateManyAndReturnArgs} args - Arguments to create many SentEmails.
     * @example
     * // Create many SentEmails
     * const sentEmail = await prisma.sentEmail.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SentEmails and only return the `id`
     * const sentEmailWithIdOnly = await prisma.sentEmail.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SentEmailCreateManyAndReturnArgs>(args?: SelectSubset<T, SentEmailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SentEmailPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SentEmail.
     * @param {SentEmailDeleteArgs} args - Arguments to delete one SentEmail.
     * @example
     * // Delete one SentEmail
     * const SentEmail = await prisma.sentEmail.delete({
     *   where: {
     *     // ... filter to delete one SentEmail
     *   }
     * })
     * 
     */
    delete<T extends SentEmailDeleteArgs>(args: SelectSubset<T, SentEmailDeleteArgs<ExtArgs>>): Prisma__SentEmailClient<$Result.GetResult<Prisma.$SentEmailPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SentEmail.
     * @param {SentEmailUpdateArgs} args - Arguments to update one SentEmail.
     * @example
     * // Update one SentEmail
     * const sentEmail = await prisma.sentEmail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SentEmailUpdateArgs>(args: SelectSubset<T, SentEmailUpdateArgs<ExtArgs>>): Prisma__SentEmailClient<$Result.GetResult<Prisma.$SentEmailPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SentEmails.
     * @param {SentEmailDeleteManyArgs} args - Arguments to filter SentEmails to delete.
     * @example
     * // Delete a few SentEmails
     * const { count } = await prisma.sentEmail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SentEmailDeleteManyArgs>(args?: SelectSubset<T, SentEmailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SentEmails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SentEmails
     * const sentEmail = await prisma.sentEmail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SentEmailUpdateManyArgs>(args: SelectSubset<T, SentEmailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SentEmail.
     * @param {SentEmailUpsertArgs} args - Arguments to update or create a SentEmail.
     * @example
     * // Update or create a SentEmail
     * const sentEmail = await prisma.sentEmail.upsert({
     *   create: {
     *     // ... data to create a SentEmail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SentEmail we want to update
     *   }
     * })
     */
    upsert<T extends SentEmailUpsertArgs>(args: SelectSubset<T, SentEmailUpsertArgs<ExtArgs>>): Prisma__SentEmailClient<$Result.GetResult<Prisma.$SentEmailPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SentEmails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailCountArgs} args - Arguments to filter SentEmails to count.
     * @example
     * // Count the number of SentEmails
     * const count = await prisma.sentEmail.count({
     *   where: {
     *     // ... the filter for the SentEmails we want to count
     *   }
     * })
    **/
    count<T extends SentEmailCountArgs>(
      args?: Subset<T, SentEmailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SentEmailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SentEmail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SentEmailAggregateArgs>(args: Subset<T, SentEmailAggregateArgs>): Prisma.PrismaPromise<GetSentEmailAggregateType<T>>

    /**
     * Group by SentEmail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SentEmailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SentEmailGroupByArgs['orderBy'] }
        : { orderBy?: SentEmailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SentEmailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSentEmailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SentEmail model
   */
  readonly fields: SentEmailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SentEmail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SentEmailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SentEmail model
   */ 
  interface SentEmailFieldRefs {
    readonly id: FieldRef<"SentEmail", 'String'>
    readonly messageId: FieldRef<"SentEmail", 'String'>
    readonly from: FieldRef<"SentEmail", 'String'>
    readonly to: FieldRef<"SentEmail", 'String'>
    readonly cc: FieldRef<"SentEmail", 'String'>
    readonly subject: FieldRef<"SentEmail", 'String'>
    readonly bodyText: FieldRef<"SentEmail", 'String'>
    readonly bodyHtml: FieldRef<"SentEmail", 'String'>
    readonly attachments: FieldRef<"SentEmail", 'String'>
    readonly status: FieldRef<"SentEmail", 'String'>
    readonly providerId: FieldRef<"SentEmail", 'String'>
    readonly error: FieldRef<"SentEmail", 'String'>
    readonly createdAt: FieldRef<"SentEmail", 'DateTime'>
    readonly sentAt: FieldRef<"SentEmail", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SentEmail findUnique
   */
  export type SentEmailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Filter, which SentEmail to fetch.
     */
    where: SentEmailWhereUniqueInput
  }

  /**
   * SentEmail findUniqueOrThrow
   */
  export type SentEmailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Filter, which SentEmail to fetch.
     */
    where: SentEmailWhereUniqueInput
  }

  /**
   * SentEmail findFirst
   */
  export type SentEmailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Filter, which SentEmail to fetch.
     */
    where?: SentEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SentEmails to fetch.
     */
    orderBy?: SentEmailOrderByWithRelationInput | SentEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SentEmails.
     */
    cursor?: SentEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SentEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SentEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SentEmails.
     */
    distinct?: SentEmailScalarFieldEnum | SentEmailScalarFieldEnum[]
  }

  /**
   * SentEmail findFirstOrThrow
   */
  export type SentEmailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Filter, which SentEmail to fetch.
     */
    where?: SentEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SentEmails to fetch.
     */
    orderBy?: SentEmailOrderByWithRelationInput | SentEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SentEmails.
     */
    cursor?: SentEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SentEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SentEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SentEmails.
     */
    distinct?: SentEmailScalarFieldEnum | SentEmailScalarFieldEnum[]
  }

  /**
   * SentEmail findMany
   */
  export type SentEmailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Filter, which SentEmails to fetch.
     */
    where?: SentEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SentEmails to fetch.
     */
    orderBy?: SentEmailOrderByWithRelationInput | SentEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SentEmails.
     */
    cursor?: SentEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SentEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SentEmails.
     */
    skip?: number
    distinct?: SentEmailScalarFieldEnum | SentEmailScalarFieldEnum[]
  }

  /**
   * SentEmail create
   */
  export type SentEmailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * The data needed to create a SentEmail.
     */
    data: XOR<SentEmailCreateInput, SentEmailUncheckedCreateInput>
  }

  /**
   * SentEmail createMany
   */
  export type SentEmailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SentEmails.
     */
    data: SentEmailCreateManyInput | SentEmailCreateManyInput[]
  }

  /**
   * SentEmail createManyAndReturn
   */
  export type SentEmailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SentEmails.
     */
    data: SentEmailCreateManyInput | SentEmailCreateManyInput[]
  }

  /**
   * SentEmail update
   */
  export type SentEmailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * The data needed to update a SentEmail.
     */
    data: XOR<SentEmailUpdateInput, SentEmailUncheckedUpdateInput>
    /**
     * Choose, which SentEmail to update.
     */
    where: SentEmailWhereUniqueInput
  }

  /**
   * SentEmail updateMany
   */
  export type SentEmailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SentEmails.
     */
    data: XOR<SentEmailUpdateManyMutationInput, SentEmailUncheckedUpdateManyInput>
    /**
     * Filter which SentEmails to update
     */
    where?: SentEmailWhereInput
  }

  /**
   * SentEmail upsert
   */
  export type SentEmailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * The filter to search for the SentEmail to update in case it exists.
     */
    where: SentEmailWhereUniqueInput
    /**
     * In case the SentEmail found by the `where` argument doesn't exist, create a new SentEmail with this data.
     */
    create: XOR<SentEmailCreateInput, SentEmailUncheckedCreateInput>
    /**
     * In case the SentEmail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SentEmailUpdateInput, SentEmailUncheckedUpdateInput>
  }

  /**
   * SentEmail delete
   */
  export type SentEmailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Filter which SentEmail to delete.
     */
    where: SentEmailWhereUniqueInput
  }

  /**
   * SentEmail deleteMany
   */
  export type SentEmailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SentEmails to delete
     */
    where?: SentEmailWhereInput
  }

  /**
   * SentEmail without action
   */
  export type SentEmailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RawEmailScalarFieldEnum: {
    id: 'id',
    source: 'source',
    subject: 'subject',
    receivedAt: 'receivedAt',
    messageId: 'messageId',
    imapUid: 'imapUid',
    mailbox: 'mailbox',
    rawHeaders: 'rawHeaders',
    rawBody: 'rawBody',
    headers: 'headers',
    attachments: 'attachments',
    hasAttachments: 'hasAttachments',
    size: 'size',
    from: 'from',
    to: 'to',
    cc: 'cc',
    parsed: 'parsed',
    error: 'error',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RawEmailScalarFieldEnum = (typeof RawEmailScalarFieldEnum)[keyof typeof RawEmailScalarFieldEnum]


  export const DMARCReportScalarFieldEnum: {
    id: 'id',
    rawEmailId: 'rawEmailId',
    org: 'org',
    reportId: 'reportId',
    domain: 'domain',
    dateBegin: 'dateBegin',
    dateEnd: 'dateEnd',
    policyAdkim: 'policyAdkim',
    policyAspf: 'policyAspf',
    policyP: 'policyP',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DMARCReportScalarFieldEnum = (typeof DMARCReportScalarFieldEnum)[keyof typeof DMARCReportScalarFieldEnum]


  export const DMARCRecordScalarFieldEnum: {
    id: 'id',
    reportId: 'reportId',
    sourceIp: 'sourceIp',
    count: 'count',
    disposition: 'disposition',
    dkim: 'dkim',
    spf: 'spf',
    headerFrom: 'headerFrom',
    authDkim: 'authDkim',
    authSpf: 'authSpf',
    createdAt: 'createdAt'
  };

  export type DMARCRecordScalarFieldEnum = (typeof DMARCRecordScalarFieldEnum)[keyof typeof DMARCRecordScalarFieldEnum]


  export const SentEmailScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    from: 'from',
    to: 'to',
    cc: 'cc',
    subject: 'subject',
    bodyText: 'bodyText',
    bodyHtml: 'bodyHtml',
    attachments: 'attachments',
    status: 'status',
    providerId: 'providerId',
    error: 'error',
    createdAt: 'createdAt',
    sentAt: 'sentAt'
  };

  export type SentEmailScalarFieldEnum = (typeof SentEmailScalarFieldEnum)[keyof typeof SentEmailScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type RawEmailWhereInput = {
    AND?: RawEmailWhereInput | RawEmailWhereInput[]
    OR?: RawEmailWhereInput[]
    NOT?: RawEmailWhereInput | RawEmailWhereInput[]
    id?: StringFilter<"RawEmail"> | string
    source?: StringFilter<"RawEmail"> | string
    subject?: StringNullableFilter<"RawEmail"> | string | null
    receivedAt?: DateTimeFilter<"RawEmail"> | Date | string
    messageId?: StringNullableFilter<"RawEmail"> | string | null
    imapUid?: IntNullableFilter<"RawEmail"> | number | null
    mailbox?: StringFilter<"RawEmail"> | string
    rawHeaders?: StringNullableFilter<"RawEmail"> | string | null
    rawBody?: StringNullableFilter<"RawEmail"> | string | null
    headers?: StringNullableFilter<"RawEmail"> | string | null
    attachments?: StringNullableFilter<"RawEmail"> | string | null
    hasAttachments?: BoolFilter<"RawEmail"> | boolean
    size?: IntNullableFilter<"RawEmail"> | number | null
    from?: StringNullableFilter<"RawEmail"> | string | null
    to?: StringNullableFilter<"RawEmail"> | string | null
    cc?: StringNullableFilter<"RawEmail"> | string | null
    parsed?: BoolFilter<"RawEmail"> | boolean
    error?: StringNullableFilter<"RawEmail"> | string | null
    createdAt?: DateTimeFilter<"RawEmail"> | Date | string
    updatedAt?: DateTimeFilter<"RawEmail"> | Date | string
    dmarcReports?: DMARCReportListRelationFilter
  }

  export type RawEmailOrderByWithRelationInput = {
    id?: SortOrder
    source?: SortOrder
    subject?: SortOrderInput | SortOrder
    receivedAt?: SortOrder
    messageId?: SortOrderInput | SortOrder
    imapUid?: SortOrderInput | SortOrder
    mailbox?: SortOrder
    rawHeaders?: SortOrderInput | SortOrder
    rawBody?: SortOrderInput | SortOrder
    headers?: SortOrderInput | SortOrder
    attachments?: SortOrderInput | SortOrder
    hasAttachments?: SortOrder
    size?: SortOrderInput | SortOrder
    from?: SortOrderInput | SortOrder
    to?: SortOrderInput | SortOrder
    cc?: SortOrderInput | SortOrder
    parsed?: SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dmarcReports?: DMARCReportOrderByRelationAggregateInput
  }

  export type RawEmailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    messageId?: string
    AND?: RawEmailWhereInput | RawEmailWhereInput[]
    OR?: RawEmailWhereInput[]
    NOT?: RawEmailWhereInput | RawEmailWhereInput[]
    source?: StringFilter<"RawEmail"> | string
    subject?: StringNullableFilter<"RawEmail"> | string | null
    receivedAt?: DateTimeFilter<"RawEmail"> | Date | string
    imapUid?: IntNullableFilter<"RawEmail"> | number | null
    mailbox?: StringFilter<"RawEmail"> | string
    rawHeaders?: StringNullableFilter<"RawEmail"> | string | null
    rawBody?: StringNullableFilter<"RawEmail"> | string | null
    headers?: StringNullableFilter<"RawEmail"> | string | null
    attachments?: StringNullableFilter<"RawEmail"> | string | null
    hasAttachments?: BoolFilter<"RawEmail"> | boolean
    size?: IntNullableFilter<"RawEmail"> | number | null
    from?: StringNullableFilter<"RawEmail"> | string | null
    to?: StringNullableFilter<"RawEmail"> | string | null
    cc?: StringNullableFilter<"RawEmail"> | string | null
    parsed?: BoolFilter<"RawEmail"> | boolean
    error?: StringNullableFilter<"RawEmail"> | string | null
    createdAt?: DateTimeFilter<"RawEmail"> | Date | string
    updatedAt?: DateTimeFilter<"RawEmail"> | Date | string
    dmarcReports?: DMARCReportListRelationFilter
  }, "id" | "messageId">

  export type RawEmailOrderByWithAggregationInput = {
    id?: SortOrder
    source?: SortOrder
    subject?: SortOrderInput | SortOrder
    receivedAt?: SortOrder
    messageId?: SortOrderInput | SortOrder
    imapUid?: SortOrderInput | SortOrder
    mailbox?: SortOrder
    rawHeaders?: SortOrderInput | SortOrder
    rawBody?: SortOrderInput | SortOrder
    headers?: SortOrderInput | SortOrder
    attachments?: SortOrderInput | SortOrder
    hasAttachments?: SortOrder
    size?: SortOrderInput | SortOrder
    from?: SortOrderInput | SortOrder
    to?: SortOrderInput | SortOrder
    cc?: SortOrderInput | SortOrder
    parsed?: SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RawEmailCountOrderByAggregateInput
    _avg?: RawEmailAvgOrderByAggregateInput
    _max?: RawEmailMaxOrderByAggregateInput
    _min?: RawEmailMinOrderByAggregateInput
    _sum?: RawEmailSumOrderByAggregateInput
  }

  export type RawEmailScalarWhereWithAggregatesInput = {
    AND?: RawEmailScalarWhereWithAggregatesInput | RawEmailScalarWhereWithAggregatesInput[]
    OR?: RawEmailScalarWhereWithAggregatesInput[]
    NOT?: RawEmailScalarWhereWithAggregatesInput | RawEmailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RawEmail"> | string
    source?: StringWithAggregatesFilter<"RawEmail"> | string
    subject?: StringNullableWithAggregatesFilter<"RawEmail"> | string | null
    receivedAt?: DateTimeWithAggregatesFilter<"RawEmail"> | Date | string
    messageId?: StringNullableWithAggregatesFilter<"RawEmail"> | string | null
    imapUid?: IntNullableWithAggregatesFilter<"RawEmail"> | number | null
    mailbox?: StringWithAggregatesFilter<"RawEmail"> | string
    rawHeaders?: StringNullableWithAggregatesFilter<"RawEmail"> | string | null
    rawBody?: StringNullableWithAggregatesFilter<"RawEmail"> | string | null
    headers?: StringNullableWithAggregatesFilter<"RawEmail"> | string | null
    attachments?: StringNullableWithAggregatesFilter<"RawEmail"> | string | null
    hasAttachments?: BoolWithAggregatesFilter<"RawEmail"> | boolean
    size?: IntNullableWithAggregatesFilter<"RawEmail"> | number | null
    from?: StringNullableWithAggregatesFilter<"RawEmail"> | string | null
    to?: StringNullableWithAggregatesFilter<"RawEmail"> | string | null
    cc?: StringNullableWithAggregatesFilter<"RawEmail"> | string | null
    parsed?: BoolWithAggregatesFilter<"RawEmail"> | boolean
    error?: StringNullableWithAggregatesFilter<"RawEmail"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RawEmail"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RawEmail"> | Date | string
  }

  export type DMARCReportWhereInput = {
    AND?: DMARCReportWhereInput | DMARCReportWhereInput[]
    OR?: DMARCReportWhereInput[]
    NOT?: DMARCReportWhereInput | DMARCReportWhereInput[]
    id?: StringFilter<"DMARCReport"> | string
    rawEmailId?: StringNullableFilter<"DMARCReport"> | string | null
    org?: StringNullableFilter<"DMARCReport"> | string | null
    reportId?: StringNullableFilter<"DMARCReport"> | string | null
    domain?: StringNullableFilter<"DMARCReport"> | string | null
    dateBegin?: IntNullableFilter<"DMARCReport"> | number | null
    dateEnd?: IntNullableFilter<"DMARCReport"> | number | null
    policyAdkim?: StringNullableFilter<"DMARCReport"> | string | null
    policyAspf?: StringNullableFilter<"DMARCReport"> | string | null
    policyP?: StringNullableFilter<"DMARCReport"> | string | null
    createdAt?: DateTimeFilter<"DMARCReport"> | Date | string
    updatedAt?: DateTimeFilter<"DMARCReport"> | Date | string
    rawEmail?: XOR<RawEmailNullableRelationFilter, RawEmailWhereInput> | null
    records?: DMARCRecordListRelationFilter
  }

  export type DMARCReportOrderByWithRelationInput = {
    id?: SortOrder
    rawEmailId?: SortOrderInput | SortOrder
    org?: SortOrderInput | SortOrder
    reportId?: SortOrderInput | SortOrder
    domain?: SortOrderInput | SortOrder
    dateBegin?: SortOrderInput | SortOrder
    dateEnd?: SortOrderInput | SortOrder
    policyAdkim?: SortOrderInput | SortOrder
    policyAspf?: SortOrderInput | SortOrder
    policyP?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rawEmail?: RawEmailOrderByWithRelationInput
    records?: DMARCRecordOrderByRelationAggregateInput
  }

  export type DMARCReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DMARCReportWhereInput | DMARCReportWhereInput[]
    OR?: DMARCReportWhereInput[]
    NOT?: DMARCReportWhereInput | DMARCReportWhereInput[]
    rawEmailId?: StringNullableFilter<"DMARCReport"> | string | null
    org?: StringNullableFilter<"DMARCReport"> | string | null
    reportId?: StringNullableFilter<"DMARCReport"> | string | null
    domain?: StringNullableFilter<"DMARCReport"> | string | null
    dateBegin?: IntNullableFilter<"DMARCReport"> | number | null
    dateEnd?: IntNullableFilter<"DMARCReport"> | number | null
    policyAdkim?: StringNullableFilter<"DMARCReport"> | string | null
    policyAspf?: StringNullableFilter<"DMARCReport"> | string | null
    policyP?: StringNullableFilter<"DMARCReport"> | string | null
    createdAt?: DateTimeFilter<"DMARCReport"> | Date | string
    updatedAt?: DateTimeFilter<"DMARCReport"> | Date | string
    rawEmail?: XOR<RawEmailNullableRelationFilter, RawEmailWhereInput> | null
    records?: DMARCRecordListRelationFilter
  }, "id">

  export type DMARCReportOrderByWithAggregationInput = {
    id?: SortOrder
    rawEmailId?: SortOrderInput | SortOrder
    org?: SortOrderInput | SortOrder
    reportId?: SortOrderInput | SortOrder
    domain?: SortOrderInput | SortOrder
    dateBegin?: SortOrderInput | SortOrder
    dateEnd?: SortOrderInput | SortOrder
    policyAdkim?: SortOrderInput | SortOrder
    policyAspf?: SortOrderInput | SortOrder
    policyP?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DMARCReportCountOrderByAggregateInput
    _avg?: DMARCReportAvgOrderByAggregateInput
    _max?: DMARCReportMaxOrderByAggregateInput
    _min?: DMARCReportMinOrderByAggregateInput
    _sum?: DMARCReportSumOrderByAggregateInput
  }

  export type DMARCReportScalarWhereWithAggregatesInput = {
    AND?: DMARCReportScalarWhereWithAggregatesInput | DMARCReportScalarWhereWithAggregatesInput[]
    OR?: DMARCReportScalarWhereWithAggregatesInput[]
    NOT?: DMARCReportScalarWhereWithAggregatesInput | DMARCReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DMARCReport"> | string
    rawEmailId?: StringNullableWithAggregatesFilter<"DMARCReport"> | string | null
    org?: StringNullableWithAggregatesFilter<"DMARCReport"> | string | null
    reportId?: StringNullableWithAggregatesFilter<"DMARCReport"> | string | null
    domain?: StringNullableWithAggregatesFilter<"DMARCReport"> | string | null
    dateBegin?: IntNullableWithAggregatesFilter<"DMARCReport"> | number | null
    dateEnd?: IntNullableWithAggregatesFilter<"DMARCReport"> | number | null
    policyAdkim?: StringNullableWithAggregatesFilter<"DMARCReport"> | string | null
    policyAspf?: StringNullableWithAggregatesFilter<"DMARCReport"> | string | null
    policyP?: StringNullableWithAggregatesFilter<"DMARCReport"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DMARCReport"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DMARCReport"> | Date | string
  }

  export type DMARCRecordWhereInput = {
    AND?: DMARCRecordWhereInput | DMARCRecordWhereInput[]
    OR?: DMARCRecordWhereInput[]
    NOT?: DMARCRecordWhereInput | DMARCRecordWhereInput[]
    id?: StringFilter<"DMARCRecord"> | string
    reportId?: StringFilter<"DMARCRecord"> | string
    sourceIp?: StringNullableFilter<"DMARCRecord"> | string | null
    count?: IntNullableFilter<"DMARCRecord"> | number | null
    disposition?: StringNullableFilter<"DMARCRecord"> | string | null
    dkim?: StringNullableFilter<"DMARCRecord"> | string | null
    spf?: StringNullableFilter<"DMARCRecord"> | string | null
    headerFrom?: StringNullableFilter<"DMARCRecord"> | string | null
    authDkim?: StringNullableFilter<"DMARCRecord"> | string | null
    authSpf?: StringNullableFilter<"DMARCRecord"> | string | null
    createdAt?: DateTimeFilter<"DMARCRecord"> | Date | string
    report?: XOR<DMARCReportRelationFilter, DMARCReportWhereInput>
  }

  export type DMARCRecordOrderByWithRelationInput = {
    id?: SortOrder
    reportId?: SortOrder
    sourceIp?: SortOrderInput | SortOrder
    count?: SortOrderInput | SortOrder
    disposition?: SortOrderInput | SortOrder
    dkim?: SortOrderInput | SortOrder
    spf?: SortOrderInput | SortOrder
    headerFrom?: SortOrderInput | SortOrder
    authDkim?: SortOrderInput | SortOrder
    authSpf?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    report?: DMARCReportOrderByWithRelationInput
  }

  export type DMARCRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DMARCRecordWhereInput | DMARCRecordWhereInput[]
    OR?: DMARCRecordWhereInput[]
    NOT?: DMARCRecordWhereInput | DMARCRecordWhereInput[]
    reportId?: StringFilter<"DMARCRecord"> | string
    sourceIp?: StringNullableFilter<"DMARCRecord"> | string | null
    count?: IntNullableFilter<"DMARCRecord"> | number | null
    disposition?: StringNullableFilter<"DMARCRecord"> | string | null
    dkim?: StringNullableFilter<"DMARCRecord"> | string | null
    spf?: StringNullableFilter<"DMARCRecord"> | string | null
    headerFrom?: StringNullableFilter<"DMARCRecord"> | string | null
    authDkim?: StringNullableFilter<"DMARCRecord"> | string | null
    authSpf?: StringNullableFilter<"DMARCRecord"> | string | null
    createdAt?: DateTimeFilter<"DMARCRecord"> | Date | string
    report?: XOR<DMARCReportRelationFilter, DMARCReportWhereInput>
  }, "id">

  export type DMARCRecordOrderByWithAggregationInput = {
    id?: SortOrder
    reportId?: SortOrder
    sourceIp?: SortOrderInput | SortOrder
    count?: SortOrderInput | SortOrder
    disposition?: SortOrderInput | SortOrder
    dkim?: SortOrderInput | SortOrder
    spf?: SortOrderInput | SortOrder
    headerFrom?: SortOrderInput | SortOrder
    authDkim?: SortOrderInput | SortOrder
    authSpf?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: DMARCRecordCountOrderByAggregateInput
    _avg?: DMARCRecordAvgOrderByAggregateInput
    _max?: DMARCRecordMaxOrderByAggregateInput
    _min?: DMARCRecordMinOrderByAggregateInput
    _sum?: DMARCRecordSumOrderByAggregateInput
  }

  export type DMARCRecordScalarWhereWithAggregatesInput = {
    AND?: DMARCRecordScalarWhereWithAggregatesInput | DMARCRecordScalarWhereWithAggregatesInput[]
    OR?: DMARCRecordScalarWhereWithAggregatesInput[]
    NOT?: DMARCRecordScalarWhereWithAggregatesInput | DMARCRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DMARCRecord"> | string
    reportId?: StringWithAggregatesFilter<"DMARCRecord"> | string
    sourceIp?: StringNullableWithAggregatesFilter<"DMARCRecord"> | string | null
    count?: IntNullableWithAggregatesFilter<"DMARCRecord"> | number | null
    disposition?: StringNullableWithAggregatesFilter<"DMARCRecord"> | string | null
    dkim?: StringNullableWithAggregatesFilter<"DMARCRecord"> | string | null
    spf?: StringNullableWithAggregatesFilter<"DMARCRecord"> | string | null
    headerFrom?: StringNullableWithAggregatesFilter<"DMARCRecord"> | string | null
    authDkim?: StringNullableWithAggregatesFilter<"DMARCRecord"> | string | null
    authSpf?: StringNullableWithAggregatesFilter<"DMARCRecord"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DMARCRecord"> | Date | string
  }

  export type SentEmailWhereInput = {
    AND?: SentEmailWhereInput | SentEmailWhereInput[]
    OR?: SentEmailWhereInput[]
    NOT?: SentEmailWhereInput | SentEmailWhereInput[]
    id?: StringFilter<"SentEmail"> | string
    messageId?: StringNullableFilter<"SentEmail"> | string | null
    from?: StringFilter<"SentEmail"> | string
    to?: StringFilter<"SentEmail"> | string
    cc?: StringNullableFilter<"SentEmail"> | string | null
    subject?: StringNullableFilter<"SentEmail"> | string | null
    bodyText?: StringNullableFilter<"SentEmail"> | string | null
    bodyHtml?: StringNullableFilter<"SentEmail"> | string | null
    attachments?: StringNullableFilter<"SentEmail"> | string | null
    status?: StringFilter<"SentEmail"> | string
    providerId?: StringNullableFilter<"SentEmail"> | string | null
    error?: StringNullableFilter<"SentEmail"> | string | null
    createdAt?: DateTimeFilter<"SentEmail"> | Date | string
    sentAt?: DateTimeNullableFilter<"SentEmail"> | Date | string | null
  }

  export type SentEmailOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrderInput | SortOrder
    from?: SortOrder
    to?: SortOrder
    cc?: SortOrderInput | SortOrder
    subject?: SortOrderInput | SortOrder
    bodyText?: SortOrderInput | SortOrder
    bodyHtml?: SortOrderInput | SortOrder
    attachments?: SortOrderInput | SortOrder
    status?: SortOrder
    providerId?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrderInput | SortOrder
  }

  export type SentEmailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    messageId?: string
    AND?: SentEmailWhereInput | SentEmailWhereInput[]
    OR?: SentEmailWhereInput[]
    NOT?: SentEmailWhereInput | SentEmailWhereInput[]
    from?: StringFilter<"SentEmail"> | string
    to?: StringFilter<"SentEmail"> | string
    cc?: StringNullableFilter<"SentEmail"> | string | null
    subject?: StringNullableFilter<"SentEmail"> | string | null
    bodyText?: StringNullableFilter<"SentEmail"> | string | null
    bodyHtml?: StringNullableFilter<"SentEmail"> | string | null
    attachments?: StringNullableFilter<"SentEmail"> | string | null
    status?: StringFilter<"SentEmail"> | string
    providerId?: StringNullableFilter<"SentEmail"> | string | null
    error?: StringNullableFilter<"SentEmail"> | string | null
    createdAt?: DateTimeFilter<"SentEmail"> | Date | string
    sentAt?: DateTimeNullableFilter<"SentEmail"> | Date | string | null
  }, "id" | "messageId">

  export type SentEmailOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrderInput | SortOrder
    from?: SortOrder
    to?: SortOrder
    cc?: SortOrderInput | SortOrder
    subject?: SortOrderInput | SortOrder
    bodyText?: SortOrderInput | SortOrder
    bodyHtml?: SortOrderInput | SortOrder
    attachments?: SortOrderInput | SortOrder
    status?: SortOrder
    providerId?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    _count?: SentEmailCountOrderByAggregateInput
    _max?: SentEmailMaxOrderByAggregateInput
    _min?: SentEmailMinOrderByAggregateInput
  }

  export type SentEmailScalarWhereWithAggregatesInput = {
    AND?: SentEmailScalarWhereWithAggregatesInput | SentEmailScalarWhereWithAggregatesInput[]
    OR?: SentEmailScalarWhereWithAggregatesInput[]
    NOT?: SentEmailScalarWhereWithAggregatesInput | SentEmailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SentEmail"> | string
    messageId?: StringNullableWithAggregatesFilter<"SentEmail"> | string | null
    from?: StringWithAggregatesFilter<"SentEmail"> | string
    to?: StringWithAggregatesFilter<"SentEmail"> | string
    cc?: StringNullableWithAggregatesFilter<"SentEmail"> | string | null
    subject?: StringNullableWithAggregatesFilter<"SentEmail"> | string | null
    bodyText?: StringNullableWithAggregatesFilter<"SentEmail"> | string | null
    bodyHtml?: StringNullableWithAggregatesFilter<"SentEmail"> | string | null
    attachments?: StringNullableWithAggregatesFilter<"SentEmail"> | string | null
    status?: StringWithAggregatesFilter<"SentEmail"> | string
    providerId?: StringNullableWithAggregatesFilter<"SentEmail"> | string | null
    error?: StringNullableWithAggregatesFilter<"SentEmail"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SentEmail"> | Date | string
    sentAt?: DateTimeNullableWithAggregatesFilter<"SentEmail"> | Date | string | null
  }

  export type RawEmailCreateInput = {
    id?: string
    source: string
    subject?: string | null
    receivedAt?: Date | string
    messageId?: string | null
    imapUid?: number | null
    mailbox?: string
    rawHeaders?: string | null
    rawBody?: string | null
    headers?: string | null
    attachments?: string | null
    hasAttachments?: boolean
    size?: number | null
    from?: string | null
    to?: string | null
    cc?: string | null
    parsed?: boolean
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dmarcReports?: DMARCReportCreateNestedManyWithoutRawEmailInput
  }

  export type RawEmailUncheckedCreateInput = {
    id?: string
    source: string
    subject?: string | null
    receivedAt?: Date | string
    messageId?: string | null
    imapUid?: number | null
    mailbox?: string
    rawHeaders?: string | null
    rawBody?: string | null
    headers?: string | null
    attachments?: string | null
    hasAttachments?: boolean
    size?: number | null
    from?: string | null
    to?: string | null
    cc?: string | null
    parsed?: boolean
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dmarcReports?: DMARCReportUncheckedCreateNestedManyWithoutRawEmailInput
  }

  export type RawEmailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    imapUid?: NullableIntFieldUpdateOperationsInput | number | null
    mailbox?: StringFieldUpdateOperationsInput | string
    rawHeaders?: NullableStringFieldUpdateOperationsInput | string | null
    rawBody?: NullableStringFieldUpdateOperationsInput | string | null
    headers?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    hasAttachments?: BoolFieldUpdateOperationsInput | boolean
    size?: NullableIntFieldUpdateOperationsInput | number | null
    from?: NullableStringFieldUpdateOperationsInput | string | null
    to?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: NullableStringFieldUpdateOperationsInput | string | null
    parsed?: BoolFieldUpdateOperationsInput | boolean
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dmarcReports?: DMARCReportUpdateManyWithoutRawEmailNestedInput
  }

  export type RawEmailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    imapUid?: NullableIntFieldUpdateOperationsInput | number | null
    mailbox?: StringFieldUpdateOperationsInput | string
    rawHeaders?: NullableStringFieldUpdateOperationsInput | string | null
    rawBody?: NullableStringFieldUpdateOperationsInput | string | null
    headers?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    hasAttachments?: BoolFieldUpdateOperationsInput | boolean
    size?: NullableIntFieldUpdateOperationsInput | number | null
    from?: NullableStringFieldUpdateOperationsInput | string | null
    to?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: NullableStringFieldUpdateOperationsInput | string | null
    parsed?: BoolFieldUpdateOperationsInput | boolean
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dmarcReports?: DMARCReportUncheckedUpdateManyWithoutRawEmailNestedInput
  }

  export type RawEmailCreateManyInput = {
    id?: string
    source: string
    subject?: string | null
    receivedAt?: Date | string
    messageId?: string | null
    imapUid?: number | null
    mailbox?: string
    rawHeaders?: string | null
    rawBody?: string | null
    headers?: string | null
    attachments?: string | null
    hasAttachments?: boolean
    size?: number | null
    from?: string | null
    to?: string | null
    cc?: string | null
    parsed?: boolean
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RawEmailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    imapUid?: NullableIntFieldUpdateOperationsInput | number | null
    mailbox?: StringFieldUpdateOperationsInput | string
    rawHeaders?: NullableStringFieldUpdateOperationsInput | string | null
    rawBody?: NullableStringFieldUpdateOperationsInput | string | null
    headers?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    hasAttachments?: BoolFieldUpdateOperationsInput | boolean
    size?: NullableIntFieldUpdateOperationsInput | number | null
    from?: NullableStringFieldUpdateOperationsInput | string | null
    to?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: NullableStringFieldUpdateOperationsInput | string | null
    parsed?: BoolFieldUpdateOperationsInput | boolean
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RawEmailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    imapUid?: NullableIntFieldUpdateOperationsInput | number | null
    mailbox?: StringFieldUpdateOperationsInput | string
    rawHeaders?: NullableStringFieldUpdateOperationsInput | string | null
    rawBody?: NullableStringFieldUpdateOperationsInput | string | null
    headers?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    hasAttachments?: BoolFieldUpdateOperationsInput | boolean
    size?: NullableIntFieldUpdateOperationsInput | number | null
    from?: NullableStringFieldUpdateOperationsInput | string | null
    to?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: NullableStringFieldUpdateOperationsInput | string | null
    parsed?: BoolFieldUpdateOperationsInput | boolean
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DMARCReportCreateInput = {
    id?: string
    org?: string | null
    reportId?: string | null
    domain?: string | null
    dateBegin?: number | null
    dateEnd?: number | null
    policyAdkim?: string | null
    policyAspf?: string | null
    policyP?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rawEmail?: RawEmailCreateNestedOneWithoutDmarcReportsInput
    records?: DMARCRecordCreateNestedManyWithoutReportInput
  }

  export type DMARCReportUncheckedCreateInput = {
    id?: string
    rawEmailId?: string | null
    org?: string | null
    reportId?: string | null
    domain?: string | null
    dateBegin?: number | null
    dateEnd?: number | null
    policyAdkim?: string | null
    policyAspf?: string | null
    policyP?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    records?: DMARCRecordUncheckedCreateNestedManyWithoutReportInput
  }

  export type DMARCReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    org?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    dateBegin?: NullableIntFieldUpdateOperationsInput | number | null
    dateEnd?: NullableIntFieldUpdateOperationsInput | number | null
    policyAdkim?: NullableStringFieldUpdateOperationsInput | string | null
    policyAspf?: NullableStringFieldUpdateOperationsInput | string | null
    policyP?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawEmail?: RawEmailUpdateOneWithoutDmarcReportsNestedInput
    records?: DMARCRecordUpdateManyWithoutReportNestedInput
  }

  export type DMARCReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rawEmailId?: NullableStringFieldUpdateOperationsInput | string | null
    org?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    dateBegin?: NullableIntFieldUpdateOperationsInput | number | null
    dateEnd?: NullableIntFieldUpdateOperationsInput | number | null
    policyAdkim?: NullableStringFieldUpdateOperationsInput | string | null
    policyAspf?: NullableStringFieldUpdateOperationsInput | string | null
    policyP?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: DMARCRecordUncheckedUpdateManyWithoutReportNestedInput
  }

  export type DMARCReportCreateManyInput = {
    id?: string
    rawEmailId?: string | null
    org?: string | null
    reportId?: string | null
    domain?: string | null
    dateBegin?: number | null
    dateEnd?: number | null
    policyAdkim?: string | null
    policyAspf?: string | null
    policyP?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DMARCReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    org?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    dateBegin?: NullableIntFieldUpdateOperationsInput | number | null
    dateEnd?: NullableIntFieldUpdateOperationsInput | number | null
    policyAdkim?: NullableStringFieldUpdateOperationsInput | string | null
    policyAspf?: NullableStringFieldUpdateOperationsInput | string | null
    policyP?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DMARCReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rawEmailId?: NullableStringFieldUpdateOperationsInput | string | null
    org?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    dateBegin?: NullableIntFieldUpdateOperationsInput | number | null
    dateEnd?: NullableIntFieldUpdateOperationsInput | number | null
    policyAdkim?: NullableStringFieldUpdateOperationsInput | string | null
    policyAspf?: NullableStringFieldUpdateOperationsInput | string | null
    policyP?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DMARCRecordCreateInput = {
    id?: string
    sourceIp?: string | null
    count?: number | null
    disposition?: string | null
    dkim?: string | null
    spf?: string | null
    headerFrom?: string | null
    authDkim?: string | null
    authSpf?: string | null
    createdAt?: Date | string
    report: DMARCReportCreateNestedOneWithoutRecordsInput
  }

  export type DMARCRecordUncheckedCreateInput = {
    id?: string
    reportId: string
    sourceIp?: string | null
    count?: number | null
    disposition?: string | null
    dkim?: string | null
    spf?: string | null
    headerFrom?: string | null
    authDkim?: string | null
    authSpf?: string | null
    createdAt?: Date | string
  }

  export type DMARCRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    dkim?: NullableStringFieldUpdateOperationsInput | string | null
    spf?: NullableStringFieldUpdateOperationsInput | string | null
    headerFrom?: NullableStringFieldUpdateOperationsInput | string | null
    authDkim?: NullableStringFieldUpdateOperationsInput | string | null
    authSpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: DMARCReportUpdateOneRequiredWithoutRecordsNestedInput
  }

  export type DMARCRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: StringFieldUpdateOperationsInput | string
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    dkim?: NullableStringFieldUpdateOperationsInput | string | null
    spf?: NullableStringFieldUpdateOperationsInput | string | null
    headerFrom?: NullableStringFieldUpdateOperationsInput | string | null
    authDkim?: NullableStringFieldUpdateOperationsInput | string | null
    authSpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DMARCRecordCreateManyInput = {
    id?: string
    reportId: string
    sourceIp?: string | null
    count?: number | null
    disposition?: string | null
    dkim?: string | null
    spf?: string | null
    headerFrom?: string | null
    authDkim?: string | null
    authSpf?: string | null
    createdAt?: Date | string
  }

  export type DMARCRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    dkim?: NullableStringFieldUpdateOperationsInput | string | null
    spf?: NullableStringFieldUpdateOperationsInput | string | null
    headerFrom?: NullableStringFieldUpdateOperationsInput | string | null
    authDkim?: NullableStringFieldUpdateOperationsInput | string | null
    authSpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DMARCRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: StringFieldUpdateOperationsInput | string
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    dkim?: NullableStringFieldUpdateOperationsInput | string | null
    spf?: NullableStringFieldUpdateOperationsInput | string | null
    headerFrom?: NullableStringFieldUpdateOperationsInput | string | null
    authDkim?: NullableStringFieldUpdateOperationsInput | string | null
    authSpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SentEmailCreateInput = {
    id?: string
    messageId?: string | null
    from: string
    to: string
    cc?: string | null
    subject?: string | null
    bodyText?: string | null
    bodyHtml?: string | null
    attachments?: string | null
    status?: string
    providerId?: string | null
    error?: string | null
    createdAt?: Date | string
    sentAt?: Date | string | null
  }

  export type SentEmailUncheckedCreateInput = {
    id?: string
    messageId?: string | null
    from: string
    to: string
    cc?: string | null
    subject?: string | null
    bodyText?: string | null
    bodyHtml?: string | null
    attachments?: string | null
    status?: string
    providerId?: string | null
    error?: string | null
    createdAt?: Date | string
    sentAt?: Date | string | null
  }

  export type SentEmailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    cc?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    bodyText?: NullableStringFieldUpdateOperationsInput | string | null
    bodyHtml?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SentEmailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    cc?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    bodyText?: NullableStringFieldUpdateOperationsInput | string | null
    bodyHtml?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SentEmailCreateManyInput = {
    id?: string
    messageId?: string | null
    from: string
    to: string
    cc?: string | null
    subject?: string | null
    bodyText?: string | null
    bodyHtml?: string | null
    attachments?: string | null
    status?: string
    providerId?: string | null
    error?: string | null
    createdAt?: Date | string
    sentAt?: Date | string | null
  }

  export type SentEmailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    cc?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    bodyText?: NullableStringFieldUpdateOperationsInput | string | null
    bodyHtml?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SentEmailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    cc?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    bodyText?: NullableStringFieldUpdateOperationsInput | string | null
    bodyHtml?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DMARCReportListRelationFilter = {
    every?: DMARCReportWhereInput
    some?: DMARCReportWhereInput
    none?: DMARCReportWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DMARCReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RawEmailCountOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    subject?: SortOrder
    receivedAt?: SortOrder
    messageId?: SortOrder
    imapUid?: SortOrder
    mailbox?: SortOrder
    rawHeaders?: SortOrder
    rawBody?: SortOrder
    headers?: SortOrder
    attachments?: SortOrder
    hasAttachments?: SortOrder
    size?: SortOrder
    from?: SortOrder
    to?: SortOrder
    cc?: SortOrder
    parsed?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RawEmailAvgOrderByAggregateInput = {
    imapUid?: SortOrder
    size?: SortOrder
  }

  export type RawEmailMaxOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    subject?: SortOrder
    receivedAt?: SortOrder
    messageId?: SortOrder
    imapUid?: SortOrder
    mailbox?: SortOrder
    rawHeaders?: SortOrder
    rawBody?: SortOrder
    headers?: SortOrder
    attachments?: SortOrder
    hasAttachments?: SortOrder
    size?: SortOrder
    from?: SortOrder
    to?: SortOrder
    cc?: SortOrder
    parsed?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RawEmailMinOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    subject?: SortOrder
    receivedAt?: SortOrder
    messageId?: SortOrder
    imapUid?: SortOrder
    mailbox?: SortOrder
    rawHeaders?: SortOrder
    rawBody?: SortOrder
    headers?: SortOrder
    attachments?: SortOrder
    hasAttachments?: SortOrder
    size?: SortOrder
    from?: SortOrder
    to?: SortOrder
    cc?: SortOrder
    parsed?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RawEmailSumOrderByAggregateInput = {
    imapUid?: SortOrder
    size?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RawEmailNullableRelationFilter = {
    is?: RawEmailWhereInput | null
    isNot?: RawEmailWhereInput | null
  }

  export type DMARCRecordListRelationFilter = {
    every?: DMARCRecordWhereInput
    some?: DMARCRecordWhereInput
    none?: DMARCRecordWhereInput
  }

  export type DMARCRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DMARCReportCountOrderByAggregateInput = {
    id?: SortOrder
    rawEmailId?: SortOrder
    org?: SortOrder
    reportId?: SortOrder
    domain?: SortOrder
    dateBegin?: SortOrder
    dateEnd?: SortOrder
    policyAdkim?: SortOrder
    policyAspf?: SortOrder
    policyP?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DMARCReportAvgOrderByAggregateInput = {
    dateBegin?: SortOrder
    dateEnd?: SortOrder
  }

  export type DMARCReportMaxOrderByAggregateInput = {
    id?: SortOrder
    rawEmailId?: SortOrder
    org?: SortOrder
    reportId?: SortOrder
    domain?: SortOrder
    dateBegin?: SortOrder
    dateEnd?: SortOrder
    policyAdkim?: SortOrder
    policyAspf?: SortOrder
    policyP?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DMARCReportMinOrderByAggregateInput = {
    id?: SortOrder
    rawEmailId?: SortOrder
    org?: SortOrder
    reportId?: SortOrder
    domain?: SortOrder
    dateBegin?: SortOrder
    dateEnd?: SortOrder
    policyAdkim?: SortOrder
    policyAspf?: SortOrder
    policyP?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DMARCReportSumOrderByAggregateInput = {
    dateBegin?: SortOrder
    dateEnd?: SortOrder
  }

  export type DMARCReportRelationFilter = {
    is?: DMARCReportWhereInput
    isNot?: DMARCReportWhereInput
  }

  export type DMARCRecordCountOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    sourceIp?: SortOrder
    count?: SortOrder
    disposition?: SortOrder
    dkim?: SortOrder
    spf?: SortOrder
    headerFrom?: SortOrder
    authDkim?: SortOrder
    authSpf?: SortOrder
    createdAt?: SortOrder
  }

  export type DMARCRecordAvgOrderByAggregateInput = {
    count?: SortOrder
  }

  export type DMARCRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    sourceIp?: SortOrder
    count?: SortOrder
    disposition?: SortOrder
    dkim?: SortOrder
    spf?: SortOrder
    headerFrom?: SortOrder
    authDkim?: SortOrder
    authSpf?: SortOrder
    createdAt?: SortOrder
  }

  export type DMARCRecordMinOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    sourceIp?: SortOrder
    count?: SortOrder
    disposition?: SortOrder
    dkim?: SortOrder
    spf?: SortOrder
    headerFrom?: SortOrder
    authDkim?: SortOrder
    authSpf?: SortOrder
    createdAt?: SortOrder
  }

  export type DMARCRecordSumOrderByAggregateInput = {
    count?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SentEmailCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    from?: SortOrder
    to?: SortOrder
    cc?: SortOrder
    subject?: SortOrder
    bodyText?: SortOrder
    bodyHtml?: SortOrder
    attachments?: SortOrder
    status?: SortOrder
    providerId?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrder
  }

  export type SentEmailMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    from?: SortOrder
    to?: SortOrder
    cc?: SortOrder
    subject?: SortOrder
    bodyText?: SortOrder
    bodyHtml?: SortOrder
    attachments?: SortOrder
    status?: SortOrder
    providerId?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrder
  }

  export type SentEmailMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    from?: SortOrder
    to?: SortOrder
    cc?: SortOrder
    subject?: SortOrder
    bodyText?: SortOrder
    bodyHtml?: SortOrder
    attachments?: SortOrder
    status?: SortOrder
    providerId?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DMARCReportCreateNestedManyWithoutRawEmailInput = {
    create?: XOR<DMARCReportCreateWithoutRawEmailInput, DMARCReportUncheckedCreateWithoutRawEmailInput> | DMARCReportCreateWithoutRawEmailInput[] | DMARCReportUncheckedCreateWithoutRawEmailInput[]
    connectOrCreate?: DMARCReportCreateOrConnectWithoutRawEmailInput | DMARCReportCreateOrConnectWithoutRawEmailInput[]
    createMany?: DMARCReportCreateManyRawEmailInputEnvelope
    connect?: DMARCReportWhereUniqueInput | DMARCReportWhereUniqueInput[]
  }

  export type DMARCReportUncheckedCreateNestedManyWithoutRawEmailInput = {
    create?: XOR<DMARCReportCreateWithoutRawEmailInput, DMARCReportUncheckedCreateWithoutRawEmailInput> | DMARCReportCreateWithoutRawEmailInput[] | DMARCReportUncheckedCreateWithoutRawEmailInput[]
    connectOrCreate?: DMARCReportCreateOrConnectWithoutRawEmailInput | DMARCReportCreateOrConnectWithoutRawEmailInput[]
    createMany?: DMARCReportCreateManyRawEmailInputEnvelope
    connect?: DMARCReportWhereUniqueInput | DMARCReportWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DMARCReportUpdateManyWithoutRawEmailNestedInput = {
    create?: XOR<DMARCReportCreateWithoutRawEmailInput, DMARCReportUncheckedCreateWithoutRawEmailInput> | DMARCReportCreateWithoutRawEmailInput[] | DMARCReportUncheckedCreateWithoutRawEmailInput[]
    connectOrCreate?: DMARCReportCreateOrConnectWithoutRawEmailInput | DMARCReportCreateOrConnectWithoutRawEmailInput[]
    upsert?: DMARCReportUpsertWithWhereUniqueWithoutRawEmailInput | DMARCReportUpsertWithWhereUniqueWithoutRawEmailInput[]
    createMany?: DMARCReportCreateManyRawEmailInputEnvelope
    set?: DMARCReportWhereUniqueInput | DMARCReportWhereUniqueInput[]
    disconnect?: DMARCReportWhereUniqueInput | DMARCReportWhereUniqueInput[]
    delete?: DMARCReportWhereUniqueInput | DMARCReportWhereUniqueInput[]
    connect?: DMARCReportWhereUniqueInput | DMARCReportWhereUniqueInput[]
    update?: DMARCReportUpdateWithWhereUniqueWithoutRawEmailInput | DMARCReportUpdateWithWhereUniqueWithoutRawEmailInput[]
    updateMany?: DMARCReportUpdateManyWithWhereWithoutRawEmailInput | DMARCReportUpdateManyWithWhereWithoutRawEmailInput[]
    deleteMany?: DMARCReportScalarWhereInput | DMARCReportScalarWhereInput[]
  }

  export type DMARCReportUncheckedUpdateManyWithoutRawEmailNestedInput = {
    create?: XOR<DMARCReportCreateWithoutRawEmailInput, DMARCReportUncheckedCreateWithoutRawEmailInput> | DMARCReportCreateWithoutRawEmailInput[] | DMARCReportUncheckedCreateWithoutRawEmailInput[]
    connectOrCreate?: DMARCReportCreateOrConnectWithoutRawEmailInput | DMARCReportCreateOrConnectWithoutRawEmailInput[]
    upsert?: DMARCReportUpsertWithWhereUniqueWithoutRawEmailInput | DMARCReportUpsertWithWhereUniqueWithoutRawEmailInput[]
    createMany?: DMARCReportCreateManyRawEmailInputEnvelope
    set?: DMARCReportWhereUniqueInput | DMARCReportWhereUniqueInput[]
    disconnect?: DMARCReportWhereUniqueInput | DMARCReportWhereUniqueInput[]
    delete?: DMARCReportWhereUniqueInput | DMARCReportWhereUniqueInput[]
    connect?: DMARCReportWhereUniqueInput | DMARCReportWhereUniqueInput[]
    update?: DMARCReportUpdateWithWhereUniqueWithoutRawEmailInput | DMARCReportUpdateWithWhereUniqueWithoutRawEmailInput[]
    updateMany?: DMARCReportUpdateManyWithWhereWithoutRawEmailInput | DMARCReportUpdateManyWithWhereWithoutRawEmailInput[]
    deleteMany?: DMARCReportScalarWhereInput | DMARCReportScalarWhereInput[]
  }

  export type RawEmailCreateNestedOneWithoutDmarcReportsInput = {
    create?: XOR<RawEmailCreateWithoutDmarcReportsInput, RawEmailUncheckedCreateWithoutDmarcReportsInput>
    connectOrCreate?: RawEmailCreateOrConnectWithoutDmarcReportsInput
    connect?: RawEmailWhereUniqueInput
  }

  export type DMARCRecordCreateNestedManyWithoutReportInput = {
    create?: XOR<DMARCRecordCreateWithoutReportInput, DMARCRecordUncheckedCreateWithoutReportInput> | DMARCRecordCreateWithoutReportInput[] | DMARCRecordUncheckedCreateWithoutReportInput[]
    connectOrCreate?: DMARCRecordCreateOrConnectWithoutReportInput | DMARCRecordCreateOrConnectWithoutReportInput[]
    createMany?: DMARCRecordCreateManyReportInputEnvelope
    connect?: DMARCRecordWhereUniqueInput | DMARCRecordWhereUniqueInput[]
  }

  export type DMARCRecordUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<DMARCRecordCreateWithoutReportInput, DMARCRecordUncheckedCreateWithoutReportInput> | DMARCRecordCreateWithoutReportInput[] | DMARCRecordUncheckedCreateWithoutReportInput[]
    connectOrCreate?: DMARCRecordCreateOrConnectWithoutReportInput | DMARCRecordCreateOrConnectWithoutReportInput[]
    createMany?: DMARCRecordCreateManyReportInputEnvelope
    connect?: DMARCRecordWhereUniqueInput | DMARCRecordWhereUniqueInput[]
  }

  export type RawEmailUpdateOneWithoutDmarcReportsNestedInput = {
    create?: XOR<RawEmailCreateWithoutDmarcReportsInput, RawEmailUncheckedCreateWithoutDmarcReportsInput>
    connectOrCreate?: RawEmailCreateOrConnectWithoutDmarcReportsInput
    upsert?: RawEmailUpsertWithoutDmarcReportsInput
    disconnect?: RawEmailWhereInput | boolean
    delete?: RawEmailWhereInput | boolean
    connect?: RawEmailWhereUniqueInput
    update?: XOR<XOR<RawEmailUpdateToOneWithWhereWithoutDmarcReportsInput, RawEmailUpdateWithoutDmarcReportsInput>, RawEmailUncheckedUpdateWithoutDmarcReportsInput>
  }

  export type DMARCRecordUpdateManyWithoutReportNestedInput = {
    create?: XOR<DMARCRecordCreateWithoutReportInput, DMARCRecordUncheckedCreateWithoutReportInput> | DMARCRecordCreateWithoutReportInput[] | DMARCRecordUncheckedCreateWithoutReportInput[]
    connectOrCreate?: DMARCRecordCreateOrConnectWithoutReportInput | DMARCRecordCreateOrConnectWithoutReportInput[]
    upsert?: DMARCRecordUpsertWithWhereUniqueWithoutReportInput | DMARCRecordUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: DMARCRecordCreateManyReportInputEnvelope
    set?: DMARCRecordWhereUniqueInput | DMARCRecordWhereUniqueInput[]
    disconnect?: DMARCRecordWhereUniqueInput | DMARCRecordWhereUniqueInput[]
    delete?: DMARCRecordWhereUniqueInput | DMARCRecordWhereUniqueInput[]
    connect?: DMARCRecordWhereUniqueInput | DMARCRecordWhereUniqueInput[]
    update?: DMARCRecordUpdateWithWhereUniqueWithoutReportInput | DMARCRecordUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: DMARCRecordUpdateManyWithWhereWithoutReportInput | DMARCRecordUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: DMARCRecordScalarWhereInput | DMARCRecordScalarWhereInput[]
  }

  export type DMARCRecordUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<DMARCRecordCreateWithoutReportInput, DMARCRecordUncheckedCreateWithoutReportInput> | DMARCRecordCreateWithoutReportInput[] | DMARCRecordUncheckedCreateWithoutReportInput[]
    connectOrCreate?: DMARCRecordCreateOrConnectWithoutReportInput | DMARCRecordCreateOrConnectWithoutReportInput[]
    upsert?: DMARCRecordUpsertWithWhereUniqueWithoutReportInput | DMARCRecordUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: DMARCRecordCreateManyReportInputEnvelope
    set?: DMARCRecordWhereUniqueInput | DMARCRecordWhereUniqueInput[]
    disconnect?: DMARCRecordWhereUniqueInput | DMARCRecordWhereUniqueInput[]
    delete?: DMARCRecordWhereUniqueInput | DMARCRecordWhereUniqueInput[]
    connect?: DMARCRecordWhereUniqueInput | DMARCRecordWhereUniqueInput[]
    update?: DMARCRecordUpdateWithWhereUniqueWithoutReportInput | DMARCRecordUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: DMARCRecordUpdateManyWithWhereWithoutReportInput | DMARCRecordUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: DMARCRecordScalarWhereInput | DMARCRecordScalarWhereInput[]
  }

  export type DMARCReportCreateNestedOneWithoutRecordsInput = {
    create?: XOR<DMARCReportCreateWithoutRecordsInput, DMARCReportUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: DMARCReportCreateOrConnectWithoutRecordsInput
    connect?: DMARCReportWhereUniqueInput
  }

  export type DMARCReportUpdateOneRequiredWithoutRecordsNestedInput = {
    create?: XOR<DMARCReportCreateWithoutRecordsInput, DMARCReportUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: DMARCReportCreateOrConnectWithoutRecordsInput
    upsert?: DMARCReportUpsertWithoutRecordsInput
    connect?: DMARCReportWhereUniqueInput
    update?: XOR<XOR<DMARCReportUpdateToOneWithWhereWithoutRecordsInput, DMARCReportUpdateWithoutRecordsInput>, DMARCReportUncheckedUpdateWithoutRecordsInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DMARCReportCreateWithoutRawEmailInput = {
    id?: string
    org?: string | null
    reportId?: string | null
    domain?: string | null
    dateBegin?: number | null
    dateEnd?: number | null
    policyAdkim?: string | null
    policyAspf?: string | null
    policyP?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    records?: DMARCRecordCreateNestedManyWithoutReportInput
  }

  export type DMARCReportUncheckedCreateWithoutRawEmailInput = {
    id?: string
    org?: string | null
    reportId?: string | null
    domain?: string | null
    dateBegin?: number | null
    dateEnd?: number | null
    policyAdkim?: string | null
    policyAspf?: string | null
    policyP?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    records?: DMARCRecordUncheckedCreateNestedManyWithoutReportInput
  }

  export type DMARCReportCreateOrConnectWithoutRawEmailInput = {
    where: DMARCReportWhereUniqueInput
    create: XOR<DMARCReportCreateWithoutRawEmailInput, DMARCReportUncheckedCreateWithoutRawEmailInput>
  }

  export type DMARCReportCreateManyRawEmailInputEnvelope = {
    data: DMARCReportCreateManyRawEmailInput | DMARCReportCreateManyRawEmailInput[]
  }

  export type DMARCReportUpsertWithWhereUniqueWithoutRawEmailInput = {
    where: DMARCReportWhereUniqueInput
    update: XOR<DMARCReportUpdateWithoutRawEmailInput, DMARCReportUncheckedUpdateWithoutRawEmailInput>
    create: XOR<DMARCReportCreateWithoutRawEmailInput, DMARCReportUncheckedCreateWithoutRawEmailInput>
  }

  export type DMARCReportUpdateWithWhereUniqueWithoutRawEmailInput = {
    where: DMARCReportWhereUniqueInput
    data: XOR<DMARCReportUpdateWithoutRawEmailInput, DMARCReportUncheckedUpdateWithoutRawEmailInput>
  }

  export type DMARCReportUpdateManyWithWhereWithoutRawEmailInput = {
    where: DMARCReportScalarWhereInput
    data: XOR<DMARCReportUpdateManyMutationInput, DMARCReportUncheckedUpdateManyWithoutRawEmailInput>
  }

  export type DMARCReportScalarWhereInput = {
    AND?: DMARCReportScalarWhereInput | DMARCReportScalarWhereInput[]
    OR?: DMARCReportScalarWhereInput[]
    NOT?: DMARCReportScalarWhereInput | DMARCReportScalarWhereInput[]
    id?: StringFilter<"DMARCReport"> | string
    rawEmailId?: StringNullableFilter<"DMARCReport"> | string | null
    org?: StringNullableFilter<"DMARCReport"> | string | null
    reportId?: StringNullableFilter<"DMARCReport"> | string | null
    domain?: StringNullableFilter<"DMARCReport"> | string | null
    dateBegin?: IntNullableFilter<"DMARCReport"> | number | null
    dateEnd?: IntNullableFilter<"DMARCReport"> | number | null
    policyAdkim?: StringNullableFilter<"DMARCReport"> | string | null
    policyAspf?: StringNullableFilter<"DMARCReport"> | string | null
    policyP?: StringNullableFilter<"DMARCReport"> | string | null
    createdAt?: DateTimeFilter<"DMARCReport"> | Date | string
    updatedAt?: DateTimeFilter<"DMARCReport"> | Date | string
  }

  export type RawEmailCreateWithoutDmarcReportsInput = {
    id?: string
    source: string
    subject?: string | null
    receivedAt?: Date | string
    messageId?: string | null
    imapUid?: number | null
    mailbox?: string
    rawHeaders?: string | null
    rawBody?: string | null
    headers?: string | null
    attachments?: string | null
    hasAttachments?: boolean
    size?: number | null
    from?: string | null
    to?: string | null
    cc?: string | null
    parsed?: boolean
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RawEmailUncheckedCreateWithoutDmarcReportsInput = {
    id?: string
    source: string
    subject?: string | null
    receivedAt?: Date | string
    messageId?: string | null
    imapUid?: number | null
    mailbox?: string
    rawHeaders?: string | null
    rawBody?: string | null
    headers?: string | null
    attachments?: string | null
    hasAttachments?: boolean
    size?: number | null
    from?: string | null
    to?: string | null
    cc?: string | null
    parsed?: boolean
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RawEmailCreateOrConnectWithoutDmarcReportsInput = {
    where: RawEmailWhereUniqueInput
    create: XOR<RawEmailCreateWithoutDmarcReportsInput, RawEmailUncheckedCreateWithoutDmarcReportsInput>
  }

  export type DMARCRecordCreateWithoutReportInput = {
    id?: string
    sourceIp?: string | null
    count?: number | null
    disposition?: string | null
    dkim?: string | null
    spf?: string | null
    headerFrom?: string | null
    authDkim?: string | null
    authSpf?: string | null
    createdAt?: Date | string
  }

  export type DMARCRecordUncheckedCreateWithoutReportInput = {
    id?: string
    sourceIp?: string | null
    count?: number | null
    disposition?: string | null
    dkim?: string | null
    spf?: string | null
    headerFrom?: string | null
    authDkim?: string | null
    authSpf?: string | null
    createdAt?: Date | string
  }

  export type DMARCRecordCreateOrConnectWithoutReportInput = {
    where: DMARCRecordWhereUniqueInput
    create: XOR<DMARCRecordCreateWithoutReportInput, DMARCRecordUncheckedCreateWithoutReportInput>
  }

  export type DMARCRecordCreateManyReportInputEnvelope = {
    data: DMARCRecordCreateManyReportInput | DMARCRecordCreateManyReportInput[]
  }

  export type RawEmailUpsertWithoutDmarcReportsInput = {
    update: XOR<RawEmailUpdateWithoutDmarcReportsInput, RawEmailUncheckedUpdateWithoutDmarcReportsInput>
    create: XOR<RawEmailCreateWithoutDmarcReportsInput, RawEmailUncheckedCreateWithoutDmarcReportsInput>
    where?: RawEmailWhereInput
  }

  export type RawEmailUpdateToOneWithWhereWithoutDmarcReportsInput = {
    where?: RawEmailWhereInput
    data: XOR<RawEmailUpdateWithoutDmarcReportsInput, RawEmailUncheckedUpdateWithoutDmarcReportsInput>
  }

  export type RawEmailUpdateWithoutDmarcReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    imapUid?: NullableIntFieldUpdateOperationsInput | number | null
    mailbox?: StringFieldUpdateOperationsInput | string
    rawHeaders?: NullableStringFieldUpdateOperationsInput | string | null
    rawBody?: NullableStringFieldUpdateOperationsInput | string | null
    headers?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    hasAttachments?: BoolFieldUpdateOperationsInput | boolean
    size?: NullableIntFieldUpdateOperationsInput | number | null
    from?: NullableStringFieldUpdateOperationsInput | string | null
    to?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: NullableStringFieldUpdateOperationsInput | string | null
    parsed?: BoolFieldUpdateOperationsInput | boolean
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RawEmailUncheckedUpdateWithoutDmarcReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    imapUid?: NullableIntFieldUpdateOperationsInput | number | null
    mailbox?: StringFieldUpdateOperationsInput | string
    rawHeaders?: NullableStringFieldUpdateOperationsInput | string | null
    rawBody?: NullableStringFieldUpdateOperationsInput | string | null
    headers?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    hasAttachments?: BoolFieldUpdateOperationsInput | boolean
    size?: NullableIntFieldUpdateOperationsInput | number | null
    from?: NullableStringFieldUpdateOperationsInput | string | null
    to?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: NullableStringFieldUpdateOperationsInput | string | null
    parsed?: BoolFieldUpdateOperationsInput | boolean
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DMARCRecordUpsertWithWhereUniqueWithoutReportInput = {
    where: DMARCRecordWhereUniqueInput
    update: XOR<DMARCRecordUpdateWithoutReportInput, DMARCRecordUncheckedUpdateWithoutReportInput>
    create: XOR<DMARCRecordCreateWithoutReportInput, DMARCRecordUncheckedCreateWithoutReportInput>
  }

  export type DMARCRecordUpdateWithWhereUniqueWithoutReportInput = {
    where: DMARCRecordWhereUniqueInput
    data: XOR<DMARCRecordUpdateWithoutReportInput, DMARCRecordUncheckedUpdateWithoutReportInput>
  }

  export type DMARCRecordUpdateManyWithWhereWithoutReportInput = {
    where: DMARCRecordScalarWhereInput
    data: XOR<DMARCRecordUpdateManyMutationInput, DMARCRecordUncheckedUpdateManyWithoutReportInput>
  }

  export type DMARCRecordScalarWhereInput = {
    AND?: DMARCRecordScalarWhereInput | DMARCRecordScalarWhereInput[]
    OR?: DMARCRecordScalarWhereInput[]
    NOT?: DMARCRecordScalarWhereInput | DMARCRecordScalarWhereInput[]
    id?: StringFilter<"DMARCRecord"> | string
    reportId?: StringFilter<"DMARCRecord"> | string
    sourceIp?: StringNullableFilter<"DMARCRecord"> | string | null
    count?: IntNullableFilter<"DMARCRecord"> | number | null
    disposition?: StringNullableFilter<"DMARCRecord"> | string | null
    dkim?: StringNullableFilter<"DMARCRecord"> | string | null
    spf?: StringNullableFilter<"DMARCRecord"> | string | null
    headerFrom?: StringNullableFilter<"DMARCRecord"> | string | null
    authDkim?: StringNullableFilter<"DMARCRecord"> | string | null
    authSpf?: StringNullableFilter<"DMARCRecord"> | string | null
    createdAt?: DateTimeFilter<"DMARCRecord"> | Date | string
  }

  export type DMARCReportCreateWithoutRecordsInput = {
    id?: string
    org?: string | null
    reportId?: string | null
    domain?: string | null
    dateBegin?: number | null
    dateEnd?: number | null
    policyAdkim?: string | null
    policyAspf?: string | null
    policyP?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rawEmail?: RawEmailCreateNestedOneWithoutDmarcReportsInput
  }

  export type DMARCReportUncheckedCreateWithoutRecordsInput = {
    id?: string
    rawEmailId?: string | null
    org?: string | null
    reportId?: string | null
    domain?: string | null
    dateBegin?: number | null
    dateEnd?: number | null
    policyAdkim?: string | null
    policyAspf?: string | null
    policyP?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DMARCReportCreateOrConnectWithoutRecordsInput = {
    where: DMARCReportWhereUniqueInput
    create: XOR<DMARCReportCreateWithoutRecordsInput, DMARCReportUncheckedCreateWithoutRecordsInput>
  }

  export type DMARCReportUpsertWithoutRecordsInput = {
    update: XOR<DMARCReportUpdateWithoutRecordsInput, DMARCReportUncheckedUpdateWithoutRecordsInput>
    create: XOR<DMARCReportCreateWithoutRecordsInput, DMARCReportUncheckedCreateWithoutRecordsInput>
    where?: DMARCReportWhereInput
  }

  export type DMARCReportUpdateToOneWithWhereWithoutRecordsInput = {
    where?: DMARCReportWhereInput
    data: XOR<DMARCReportUpdateWithoutRecordsInput, DMARCReportUncheckedUpdateWithoutRecordsInput>
  }

  export type DMARCReportUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    org?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    dateBegin?: NullableIntFieldUpdateOperationsInput | number | null
    dateEnd?: NullableIntFieldUpdateOperationsInput | number | null
    policyAdkim?: NullableStringFieldUpdateOperationsInput | string | null
    policyAspf?: NullableStringFieldUpdateOperationsInput | string | null
    policyP?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawEmail?: RawEmailUpdateOneWithoutDmarcReportsNestedInput
  }

  export type DMARCReportUncheckedUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rawEmailId?: NullableStringFieldUpdateOperationsInput | string | null
    org?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    dateBegin?: NullableIntFieldUpdateOperationsInput | number | null
    dateEnd?: NullableIntFieldUpdateOperationsInput | number | null
    policyAdkim?: NullableStringFieldUpdateOperationsInput | string | null
    policyAspf?: NullableStringFieldUpdateOperationsInput | string | null
    policyP?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DMARCReportCreateManyRawEmailInput = {
    id?: string
    org?: string | null
    reportId?: string | null
    domain?: string | null
    dateBegin?: number | null
    dateEnd?: number | null
    policyAdkim?: string | null
    policyAspf?: string | null
    policyP?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DMARCReportUpdateWithoutRawEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    org?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    dateBegin?: NullableIntFieldUpdateOperationsInput | number | null
    dateEnd?: NullableIntFieldUpdateOperationsInput | number | null
    policyAdkim?: NullableStringFieldUpdateOperationsInput | string | null
    policyAspf?: NullableStringFieldUpdateOperationsInput | string | null
    policyP?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: DMARCRecordUpdateManyWithoutReportNestedInput
  }

  export type DMARCReportUncheckedUpdateWithoutRawEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    org?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    dateBegin?: NullableIntFieldUpdateOperationsInput | number | null
    dateEnd?: NullableIntFieldUpdateOperationsInput | number | null
    policyAdkim?: NullableStringFieldUpdateOperationsInput | string | null
    policyAspf?: NullableStringFieldUpdateOperationsInput | string | null
    policyP?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: DMARCRecordUncheckedUpdateManyWithoutReportNestedInput
  }

  export type DMARCReportUncheckedUpdateManyWithoutRawEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    org?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    dateBegin?: NullableIntFieldUpdateOperationsInput | number | null
    dateEnd?: NullableIntFieldUpdateOperationsInput | number | null
    policyAdkim?: NullableStringFieldUpdateOperationsInput | string | null
    policyAspf?: NullableStringFieldUpdateOperationsInput | string | null
    policyP?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DMARCRecordCreateManyReportInput = {
    id?: string
    sourceIp?: string | null
    count?: number | null
    disposition?: string | null
    dkim?: string | null
    spf?: string | null
    headerFrom?: string | null
    authDkim?: string | null
    authSpf?: string | null
    createdAt?: Date | string
  }

  export type DMARCRecordUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    dkim?: NullableStringFieldUpdateOperationsInput | string | null
    spf?: NullableStringFieldUpdateOperationsInput | string | null
    headerFrom?: NullableStringFieldUpdateOperationsInput | string | null
    authDkim?: NullableStringFieldUpdateOperationsInput | string | null
    authSpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DMARCRecordUncheckedUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    dkim?: NullableStringFieldUpdateOperationsInput | string | null
    spf?: NullableStringFieldUpdateOperationsInput | string | null
    headerFrom?: NullableStringFieldUpdateOperationsInput | string | null
    authDkim?: NullableStringFieldUpdateOperationsInput | string | null
    authSpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DMARCRecordUncheckedUpdateManyWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    count?: NullableIntFieldUpdateOperationsInput | number | null
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    dkim?: NullableStringFieldUpdateOperationsInput | string | null
    spf?: NullableStringFieldUpdateOperationsInput | string | null
    headerFrom?: NullableStringFieldUpdateOperationsInput | string | null
    authDkim?: NullableStringFieldUpdateOperationsInput | string | null
    authSpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use RawEmailCountOutputTypeDefaultArgs instead
     */
    export type RawEmailCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RawEmailCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DMARCReportCountOutputTypeDefaultArgs instead
     */
    export type DMARCReportCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DMARCReportCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RawEmailDefaultArgs instead
     */
    export type RawEmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RawEmailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DMARCReportDefaultArgs instead
     */
    export type DMARCReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DMARCReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DMARCRecordDefaultArgs instead
     */
    export type DMARCRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DMARCRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SentEmailDefaultArgs instead
     */
    export type SentEmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SentEmailDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}